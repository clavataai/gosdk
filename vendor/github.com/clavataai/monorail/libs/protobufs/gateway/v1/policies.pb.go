// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: clavata/gateway/v1/policies.proto

package v1

import (
	v1 "github.com/clavataai/monorail/libs/protobufs/shared/v1"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Same as Job status enums for consistency
type GeneratePolicyTaskStatus int32

const (
	GeneratePolicyTaskStatus_UNSPECIFIED GeneratePolicyTaskStatus = 0
	GeneratePolicyTaskStatus_PENDING     GeneratePolicyTaskStatus = 1
	GeneratePolicyTaskStatus_RUNNING     GeneratePolicyTaskStatus = 2
	GeneratePolicyTaskStatus_COMPLETED   GeneratePolicyTaskStatus = 3
	GeneratePolicyTaskStatus_FAILED      GeneratePolicyTaskStatus = 4
	GeneratePolicyTaskStatus_CANCELLED   GeneratePolicyTaskStatus = 5
)

// Enum value maps for GeneratePolicyTaskStatus.
var (
	GeneratePolicyTaskStatus_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "PENDING",
		2: "RUNNING",
		3: "COMPLETED",
		4: "FAILED",
		5: "CANCELLED",
	}
	GeneratePolicyTaskStatus_value = map[string]int32{
		"UNSPECIFIED": 0,
		"PENDING":     1,
		"RUNNING":     2,
		"COMPLETED":   3,
		"FAILED":      4,
		"CANCELLED":   5,
	}
)

func (x GeneratePolicyTaskStatus) Enum() *GeneratePolicyTaskStatus {
	p := new(GeneratePolicyTaskStatus)
	*p = x
	return p
}

func (x GeneratePolicyTaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeneratePolicyTaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_clavata_gateway_v1_policies_proto_enumTypes[0].Descriptor()
}

func (GeneratePolicyTaskStatus) Type() protoreflect.EnumType {
	return &file_clavata_gateway_v1_policies_proto_enumTypes[0]
}

func (x GeneratePolicyTaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GeneratePolicyTaskStatus.Descriptor instead.
func (GeneratePolicyTaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{0}
}

type PolicyQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Any uuids to search for
	Uuids []string `protobuf:"bytes,1,rep,name=uuids,proto3" json:"uuids,omitempty"`
	// Any keys to search for
	Keys []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	// Whether or not to show deleted policies
	IncludeExpunged bool `protobuf:"varint,3,opt,name=include_expunged,json=includeExpunged,proto3" json:"include_expunged,omitempty"`
	// The time range when the policy was created
	CreatedTimeRange *v1.TimeRange `protobuf:"bytes,4,opt,name=created_time_range,json=createdTimeRange,proto3" json:"created_time_range,omitempty"`
	// The time range when the policy was last updated
	UpdatedTimeRange *v1.TimeRange `protobuf:"bytes,5,opt,name=updated_time_range,json=updatedTimeRange,proto3" json:"updated_time_range,omitempty"`
}

func (x *PolicyQuery) Reset() {
	*x = PolicyQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyQuery) ProtoMessage() {}

func (x *PolicyQuery) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyQuery.ProtoReflect.Descriptor instead.
func (*PolicyQuery) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{0}
}

func (x *PolicyQuery) GetUuids() []string {
	if x != nil {
		return x.Uuids
	}
	return nil
}

func (x *PolicyQuery) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *PolicyQuery) GetIncludeExpunged() bool {
	if x != nil {
		return x.IncludeExpunged
	}
	return false
}

func (x *PolicyQuery) GetCreatedTimeRange() *v1.TimeRange {
	if x != nil {
		return x.CreatedTimeRange
	}
	return nil
}

func (x *PolicyQuery) GetUpdatedTimeRange() *v1.TimeRange {
	if x != nil {
		return x.UpdatedTimeRange
	}
	return nil
}

type PolicyVersionQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyIdentifier *v1.PolicyIdentifier `protobuf:"bytes,1,opt,name=policy_identifier,json=policyIdentifier,proto3" json:"policy_identifier,omitempty"`
	VersionUuids     []string             `protobuf:"bytes,2,rep,name=version_uuids,json=versionUuids,proto3" json:"version_uuids,omitempty"`
	// Whether to include expunged versions
	IncludeExpunged bool `protobuf:"varint,3,opt,name=include_expunged,json=includeExpunged,proto3" json:"include_expunged,omitempty"`
	// The time range when the policy version was created
	CreatedTimeRange *v1.TimeRange `protobuf:"bytes,4,opt,name=created_time_range,json=createdTimeRange,proto3" json:"created_time_range,omitempty"`
}

func (x *PolicyVersionQuery) Reset() {
	*x = PolicyVersionQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyVersionQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyVersionQuery) ProtoMessage() {}

func (x *PolicyVersionQuery) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyVersionQuery.ProtoReflect.Descriptor instead.
func (*PolicyVersionQuery) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{1}
}

func (x *PolicyVersionQuery) GetPolicyIdentifier() *v1.PolicyIdentifier {
	if x != nil {
		return x.PolicyIdentifier
	}
	return nil
}

func (x *PolicyVersionQuery) GetVersionUuids() []string {
	if x != nil {
		return x.VersionUuids
	}
	return nil
}

func (x *PolicyVersionQuery) GetIncludeExpunged() bool {
	if x != nil {
		return x.IncludeExpunged
	}
	return false
}

func (x *PolicyVersionQuery) GetCreatedTimeRange() *v1.TimeRange {
	if x != nil {
		return x.CreatedTimeRange
	}
	return nil
}

type GetPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The policy ID
	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
}

func (x *GetPolicyRequest) Reset() {
	*x = GetPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyRequest) ProtoMessage() {}

func (x *GetPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetPolicyRequest) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{2}
}

func (x *GetPolicyRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

type GetPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested policy
	Policy *v1.Policy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *GetPolicyResponse) Reset() {
	*x = GetPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyResponse) ProtoMessage() {}

func (x *GetPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetPolicyResponse) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{3}
}

func (x *GetPolicyResponse) GetPolicy() *v1.Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type GetPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The query to filter the policies
	Query *PolicyQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *GetPoliciesRequest) Reset() {
	*x = GetPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoliciesRequest) ProtoMessage() {}

func (x *GetPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoliciesRequest.ProtoReflect.Descriptor instead.
func (*GetPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{4}
}

func (x *GetPoliciesRequest) GetQuery() *PolicyQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type GetPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested policies
	Policies []*v1.Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
}

func (x *GetPoliciesResponse) Reset() {
	*x = GetPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoliciesResponse) ProtoMessage() {}

func (x *GetPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoliciesResponse.ProtoReflect.Descriptor instead.
func (*GetPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{5}
}

func (x *GetPoliciesResponse) GetPolicies() []*v1.Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type UpdatePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The policy to update
	Identifier *v1.PolicyIdentifier `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	PolicyKey  *string              `protobuf:"bytes,2,opt,name=policy_key,json=policyKey,proto3,oneof" json:"policy_key,omitempty"`
	Disabled   *bool                `protobuf:"varint,3,opt,name=disabled,proto3,oneof" json:"disabled,omitempty"`
	DatasetId  *string              `protobuf:"bytes,4,opt,name=dataset_id,json=datasetId,proto3,oneof" json:"dataset_id,omitempty"`
}

func (x *UpdatePolicyRequest) Reset() {
	*x = UpdatePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePolicyRequest) ProtoMessage() {}

func (x *UpdatePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdatePolicyRequest) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{6}
}

func (x *UpdatePolicyRequest) GetIdentifier() *v1.PolicyIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *UpdatePolicyRequest) GetPolicyKey() string {
	if x != nil && x.PolicyKey != nil {
		return *x.PolicyKey
	}
	return ""
}

func (x *UpdatePolicyRequest) GetDisabled() bool {
	if x != nil && x.Disabled != nil {
		return *x.Disabled
	}
	return false
}

func (x *UpdatePolicyRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

type UpdatePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated policy
	Policy *v1.Policy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *UpdatePolicyResponse) Reset() {
	*x = UpdatePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePolicyResponse) ProtoMessage() {}

func (x *UpdatePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePolicyResponse.ProtoReflect.Descriptor instead.
func (*UpdatePolicyResponse) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{7}
}

func (x *UpdatePolicyResponse) GetPolicy() *v1.Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type GetPolicyVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The query to filter the policy versions
	Query *PolicyVersionQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *GetPolicyVersionsRequest) Reset() {
	*x = GetPolicyVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPolicyVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyVersionsRequest) ProtoMessage() {}

func (x *GetPolicyVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyVersionsRequest.ProtoReflect.Descriptor instead.
func (*GetPolicyVersionsRequest) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{8}
}

func (x *GetPolicyVersionsRequest) GetQuery() *PolicyVersionQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

type GetPolicyVersionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested policy versions
	PolicyVersions []*v1.PolicyVersion `protobuf:"bytes,1,rep,name=policy_versions,json=policyVersions,proto3" json:"policy_versions,omitempty"`
}

func (x *GetPolicyVersionsResponse) Reset() {
	*x = GetPolicyVersionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPolicyVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyVersionsResponse) ProtoMessage() {}

func (x *GetPolicyVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyVersionsResponse.ProtoReflect.Descriptor instead.
func (*GetPolicyVersionsResponse) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{9}
}

func (x *GetPolicyVersionsResponse) GetPolicyVersions() []*v1.PolicyVersion {
	if x != nil {
		return x.PolicyVersions
	}
	return nil
}

type GetActivePolicyVersionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The policy key
	PolicyIdentifiers []*v1.PolicyIdentifier `protobuf:"bytes,1,rep,name=policy_identifiers,json=policyIdentifiers,proto3" json:"policy_identifiers,omitempty"`
}

func (x *GetActivePolicyVersionsRequest) Reset() {
	*x = GetActivePolicyVersionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivePolicyVersionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivePolicyVersionsRequest) ProtoMessage() {}

func (x *GetActivePolicyVersionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivePolicyVersionsRequest.ProtoReflect.Descriptor instead.
func (*GetActivePolicyVersionsRequest) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{10}
}

func (x *GetActivePolicyVersionsRequest) GetPolicyIdentifiers() []*v1.PolicyIdentifier {
	if x != nil {
		return x.PolicyIdentifiers
	}
	return nil
}

type GetActivePolicyVersionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The active policy version
	PolicyVersions []*v1.PolicyVersion `protobuf:"bytes,1,rep,name=policy_versions,json=policyVersions,proto3" json:"policy_versions,omitempty"`
}

func (x *GetActivePolicyVersionsResponse) Reset() {
	*x = GetActivePolicyVersionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivePolicyVersionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivePolicyVersionsResponse) ProtoMessage() {}

func (x *GetActivePolicyVersionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivePolicyVersionsResponse.ProtoReflect.Descriptor instead.
func (*GetActivePolicyVersionsResponse) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{11}
}

func (x *GetActivePolicyVersionsResponse) GetPolicyVersions() []*v1.PolicyVersion {
	if x != nil {
		return x.PolicyVersions
	}
	return nil
}

type DeletePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The policy ID or key
	PolicyIdentifier *v1.PolicyIdentifier `protobuf:"bytes,1,opt,name=policy_identifier,json=policyIdentifier,proto3" json:"policy_identifier,omitempty"`
}

func (x *DeletePolicyRequest) Reset() {
	*x = DeletePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePolicyRequest) ProtoMessage() {}

func (x *DeletePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePolicyRequest.ProtoReflect.Descriptor instead.
func (*DeletePolicyRequest) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{12}
}

func (x *DeletePolicyRequest) GetPolicyIdentifier() *v1.PolicyIdentifier {
	if x != nil {
		return x.PolicyIdentifier
	}
	return nil
}

type DeletePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The policy ID
	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// The policy key
	PolicyKey string `protobuf:"bytes,2,opt,name=policy_key,json=policyKey,proto3" json:"policy_key,omitempty"`
	// Was it deleted
	Deleted bool `protobuf:"varint,3,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *DeletePolicyResponse) Reset() {
	*x = DeletePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePolicyResponse) ProtoMessage() {}

func (x *DeletePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePolicyResponse.ProtoReflect.Descriptor instead.
func (*DeletePolicyResponse) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{13}
}

func (x *DeletePolicyResponse) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *DeletePolicyResponse) GetPolicyKey() string {
	if x != nil {
		return x.PolicyKey
	}
	return ""
}

func (x *DeletePolicyResponse) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

type UndeletePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The policy ID or key
	PolicyIdentifier *v1.PolicyIdentifier `protobuf:"bytes,1,opt,name=policy_identifier,json=policyIdentifier,proto3" json:"policy_identifier,omitempty"`
}

func (x *UndeletePolicyRequest) Reset() {
	*x = UndeletePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndeletePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndeletePolicyRequest) ProtoMessage() {}

func (x *UndeletePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndeletePolicyRequest.ProtoReflect.Descriptor instead.
func (*UndeletePolicyRequest) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{14}
}

func (x *UndeletePolicyRequest) GetPolicyIdentifier() *v1.PolicyIdentifier {
	if x != nil {
		return x.PolicyIdentifier
	}
	return nil
}

type UndeletePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The policy ID
	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// The policy key
	PolicyKey string `protobuf:"bytes,2,opt,name=policy_key,json=policyKey,proto3" json:"policy_key,omitempty"`
	// Was it undeleted
	Deleted bool `protobuf:"varint,3,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *UndeletePolicyResponse) Reset() {
	*x = UndeletePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UndeletePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndeletePolicyResponse) ProtoMessage() {}

func (x *UndeletePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndeletePolicyResponse.ProtoReflect.Descriptor instead.
func (*UndeletePolicyResponse) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{15}
}

func (x *UndeletePolicyResponse) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *UndeletePolicyResponse) GetPolicyKey() string {
	if x != nil {
		return x.PolicyKey
	}
	return ""
}

func (x *UndeletePolicyResponse) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

type SetActivePolicyVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The policy ID or key
	PolicyIdentifier *v1.PolicyIdentifier `protobuf:"bytes,1,opt,name=policy_identifier,json=policyIdentifier,proto3" json:"policy_identifier,omitempty"`
	// The version UUID to set as active
	ActiveVersionId string `protobuf:"bytes,2,opt,name=active_version_id,json=activeVersionId,proto3" json:"active_version_id,omitempty"`
}

func (x *SetActivePolicyVersionRequest) Reset() {
	*x = SetActivePolicyVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetActivePolicyVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActivePolicyVersionRequest) ProtoMessage() {}

func (x *SetActivePolicyVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActivePolicyVersionRequest.ProtoReflect.Descriptor instead.
func (*SetActivePolicyVersionRequest) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{16}
}

func (x *SetActivePolicyVersionRequest) GetPolicyIdentifier() *v1.PolicyIdentifier {
	if x != nil {
		return x.PolicyIdentifier
	}
	return nil
}

func (x *SetActivePolicyVersionRequest) GetActiveVersionId() string {
	if x != nil {
		return x.ActiveVersionId
	}
	return ""
}

type SetActivePolicyVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The policy ID
	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// The policy key
	PolicyKey string `protobuf:"bytes,2,opt,name=policy_key,json=policyKey,proto3" json:"policy_key,omitempty"`
	// The active version UUID
	ActiveVersionId string `protobuf:"bytes,3,opt,name=active_version_id,json=activeVersionId,proto3" json:"active_version_id,omitempty"`
}

func (x *SetActivePolicyVersionResponse) Reset() {
	*x = SetActivePolicyVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetActivePolicyVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetActivePolicyVersionResponse) ProtoMessage() {}

func (x *SetActivePolicyVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetActivePolicyVersionResponse.ProtoReflect.Descriptor instead.
func (*SetActivePolicyVersionResponse) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{17}
}

func (x *SetActivePolicyVersionResponse) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *SetActivePolicyVersionResponse) GetPolicyKey() string {
	if x != nil {
		return x.PolicyKey
	}
	return ""
}

func (x *SetActivePolicyVersionResponse) GetActiveVersionId() string {
	if x != nil {
		return x.ActiveVersionId
	}
	return ""
}

type ExpungePolicyVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version UUID to expunge
	VersionId string `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *ExpungePolicyVersionRequest) Reset() {
	*x = ExpungePolicyVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpungePolicyVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpungePolicyVersionRequest) ProtoMessage() {}

func (x *ExpungePolicyVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpungePolicyVersionRequest.ProtoReflect.Descriptor instead.
func (*ExpungePolicyVersionRequest) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{18}
}

func (x *ExpungePolicyVersionRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

type ExpungePolicyVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version UUID
	VersionId string `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// The state of the version
	Expunged bool `protobuf:"varint,2,opt,name=expunged,proto3" json:"expunged,omitempty"`
}

func (x *ExpungePolicyVersionResponse) Reset() {
	*x = ExpungePolicyVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpungePolicyVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpungePolicyVersionResponse) ProtoMessage() {}

func (x *ExpungePolicyVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpungePolicyVersionResponse.ProtoReflect.Descriptor instead.
func (*ExpungePolicyVersionResponse) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{19}
}

func (x *ExpungePolicyVersionResponse) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *ExpungePolicyVersionResponse) GetExpunged() bool {
	if x != nil {
		return x.Expunged
	}
	return false
}

type UnexpungePolicyVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version UUID to unexpunge
	VersionId string `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *UnexpungePolicyVersionRequest) Reset() {
	*x = UnexpungePolicyVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnexpungePolicyVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnexpungePolicyVersionRequest) ProtoMessage() {}

func (x *UnexpungePolicyVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnexpungePolicyVersionRequest.ProtoReflect.Descriptor instead.
func (*UnexpungePolicyVersionRequest) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{20}
}

func (x *UnexpungePolicyVersionRequest) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

type UnexpungePolicyVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version UUID
	VersionId string `protobuf:"bytes,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// The state of the version
	Expunged bool `protobuf:"varint,2,opt,name=expunged,proto3" json:"expunged,omitempty"`
}

func (x *UnexpungePolicyVersionResponse) Reset() {
	*x = UnexpungePolicyVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnexpungePolicyVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnexpungePolicyVersionResponse) ProtoMessage() {}

func (x *UnexpungePolicyVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnexpungePolicyVersionResponse.ProtoReflect.Descriptor instead.
func (*UnexpungePolicyVersionResponse) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{21}
}

func (x *UnexpungePolicyVersionResponse) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *UnexpungePolicyVersionResponse) GetExpunged() bool {
	if x != nil {
		return x.Expunged
	}
	return false
}

type ValidatePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The policy draft to be validated
	PolicyDraft string `protobuf:"bytes,1,opt,name=policy_draft,json=policyDraft,proto3" json:"policy_draft,omitempty"`
}

func (x *ValidatePolicyRequest) Reset() {
	*x = ValidatePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatePolicyRequest) ProtoMessage() {}

func (x *ValidatePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatePolicyRequest.ProtoReflect.Descriptor instead.
func (*ValidatePolicyRequest) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{22}
}

func (x *ValidatePolicyRequest) GetPolicyDraft() string {
	if x != nil {
		return x.PolicyDraft
	}
	return ""
}

type ValidatePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the policy draft
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	// The labels that were found in the policy draft
	Labels []string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	// The error message if the policy draft is invalid
	Error *v1.CompilationError `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ValidatePolicyResponse) Reset() {
	*x = ValidatePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatePolicyResponse) ProtoMessage() {}

func (x *ValidatePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatePolicyResponse.ProtoReflect.Descriptor instead.
func (*ValidatePolicyResponse) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{23}
}

func (x *ValidatePolicyResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *ValidatePolicyResponse) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ValidatePolicyResponse) GetError() *v1.CompilationError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TestPolicyOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bypass the cache
	BypassCache *bool `protobuf:"varint,1,opt,name=bypass_cache,json=bypassCache,proto3,oneof" json:"bypass_cache,omitempty"`
	// Expedited processing
	Expedited *bool `protobuf:"varint,2,opt,name=expedited,proto3,oneof" json:"expedited,omitempty"`
}

func (x *TestPolicyOptions) Reset() {
	*x = TestPolicyOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPolicyOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPolicyOptions) ProtoMessage() {}

func (x *TestPolicyOptions) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPolicyOptions.ProtoReflect.Descriptor instead.
func (*TestPolicyOptions) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{24}
}

func (x *TestPolicyOptions) GetBypassCache() bool {
	if x != nil && x.BypassCache != nil {
		return *x.BypassCache
	}
	return false
}

func (x *TestPolicyOptions) GetExpedited() bool {
	if x != nil && x.Expedited != nil {
		return *x.Expedited
	}
	return false
}

type TestPolicyWithDatasetItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The policy draft to be tested
	PolicyDraft string `protobuf:"bytes,1,opt,name=policy_draft,json=policyDraft,proto3" json:"policy_draft,omitempty"`
	// Dataset Item ids to be tested
	DatasetItemIds []string `protobuf:"bytes,2,rep,name=dataset_item_ids,json=datasetItemIds,proto3" json:"dataset_item_ids,omitempty"`
	// The threshold to use for truthyness. If not set a default value will be used.
	Threshold *float64 `protobuf:"fixed64,3,opt,name=threshold,proto3,oneof" json:"threshold,omitempty"`
	// Test options
	Options *TestPolicyOptions `protobuf:"bytes,4,opt,name=options,proto3,oneof" json:"options,omitempty"`
}

func (x *TestPolicyWithDatasetItemsRequest) Reset() {
	*x = TestPolicyWithDatasetItemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPolicyWithDatasetItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPolicyWithDatasetItemsRequest) ProtoMessage() {}

func (x *TestPolicyWithDatasetItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPolicyWithDatasetItemsRequest.ProtoReflect.Descriptor instead.
func (*TestPolicyWithDatasetItemsRequest) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{25}
}

func (x *TestPolicyWithDatasetItemsRequest) GetPolicyDraft() string {
	if x != nil {
		return x.PolicyDraft
	}
	return ""
}

func (x *TestPolicyWithDatasetItemsRequest) GetDatasetItemIds() []string {
	if x != nil {
		return x.DatasetItemIds
	}
	return nil
}

func (x *TestPolicyWithDatasetItemsRequest) GetThreshold() float64 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

func (x *TestPolicyWithDatasetItemsRequest) GetOptions() *TestPolicyOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type TestPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The policy draft to be tested
	PolicyDraft string `protobuf:"bytes,1,opt,name=policy_draft,json=policyDraft,proto3" json:"policy_draft,omitempty"`
	// The content data to be tested
	ContentData []*v1.ContentData `protobuf:"bytes,2,rep,name=content_data,json=contentData,proto3" json:"content_data,omitempty"`
	// The threshold to use for truthyness. If not set a default value will be used.
	Threshold *float64 `protobuf:"fixed64,3,opt,name=threshold,proto3,oneof" json:"threshold,omitempty"`
	// Test options
	Options *TestPolicyOptions `protobuf:"bytes,4,opt,name=options,proto3,oneof" json:"options,omitempty"`
}

func (x *TestPolicyRequest) Reset() {
	*x = TestPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPolicyRequest) ProtoMessage() {}

func (x *TestPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPolicyRequest.ProtoReflect.Descriptor instead.
func (*TestPolicyRequest) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{26}
}

func (x *TestPolicyRequest) GetPolicyDraft() string {
	if x != nil {
		return x.PolicyDraft
	}
	return ""
}

func (x *TestPolicyRequest) GetContentData() []*v1.ContentData {
	if x != nil {
		return x.ContentData
	}
	return nil
}

func (x *TestPolicyRequest) GetThreshold() float64 {
	if x != nil && x.Threshold != nil {
		return *x.Threshold
	}
	return 0
}

func (x *TestPolicyRequest) GetOptions() *TestPolicyOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type TestPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the job that executed the policy test
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The results of the policy lint step
	PolicyValid bool `protobuf:"varint,2,opt,name=policy_valid,json=policyValid,proto3" json:"policy_valid,omitempty"`
	// If the policy is invalid, the error message
	Error *v1.CompilationError `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	// The results of the policy test step
	Report *v1.PolicyEvaluationReport `protobuf:"bytes,4,opt,name=report,proto3" json:"report,omitempty"`
	// The hash of the content related to this report
	ContentHash string `protobuf:"bytes,5,opt,name=content_hash,json=contentHash,proto3" json:"content_hash,omitempty"`
	// ID of the Policy Draft saved from this test
	PolicyDraftId string `protobuf:"bytes,6,opt,name=policy_draft_id,json=policyDraftId,proto3" json:"policy_draft_id,omitempty"`
}

func (x *TestPolicyResponse) Reset() {
	*x = TestPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPolicyResponse) ProtoMessage() {}

func (x *TestPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPolicyResponse.ProtoReflect.Descriptor instead.
func (*TestPolicyResponse) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{27}
}

func (x *TestPolicyResponse) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *TestPolicyResponse) GetPolicyValid() bool {
	if x != nil {
		return x.PolicyValid
	}
	return false
}

func (x *TestPolicyResponse) GetError() *v1.CompilationError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TestPolicyResponse) GetReport() *v1.PolicyEvaluationReport {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *TestPolicyResponse) GetContentHash() string {
	if x != nil {
		return x.ContentHash
	}
	return ""
}

func (x *TestPolicyResponse) GetPolicyDraftId() string {
	if x != nil {
		return x.PolicyDraftId
	}
	return ""
}

type CompiledPolicyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The committer of the policy
	Committer string `protobuf:"bytes,1,opt,name=committer,proto3" json:"committer,omitempty"`
	// The commit "message"
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CompiledPolicyMetadata) Reset() {
	*x = CompiledPolicyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompiledPolicyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompiledPolicyMetadata) ProtoMessage() {}

func (x *CompiledPolicyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompiledPolicyMetadata.ProtoReflect.Descriptor instead.
func (*CompiledPolicyMetadata) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{28}
}

func (x *CompiledPolicyMetadata) GetCommitter() string {
	if x != nil {
		return x.Committer
	}
	return ""
}

func (x *CompiledPolicyMetadata) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreatePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyKey string `protobuf:"bytes,1,opt,name=policy_key,json=policyKey,proto3" json:"policy_key,omitempty"`
	// The text to be compiled
	VersionText string `protobuf:"bytes,2,opt,name=version_text,json=versionText,proto3" json:"version_text,omitempty"`
	// the linked dataset
	DatasetId *string `protobuf:"bytes,3,opt,name=dataset_id,json=datasetId,proto3,oneof" json:"dataset_id,omitempty"`
	// metadata for the version
	Metadata *CompiledPolicyMetadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *CreatePolicyRequest) Reset() {
	*x = CreatePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePolicyRequest) ProtoMessage() {}

func (x *CreatePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePolicyRequest.ProtoReflect.Descriptor instead.
func (*CreatePolicyRequest) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{29}
}

func (x *CreatePolicyRequest) GetPolicyKey() string {
	if x != nil {
		return x.PolicyKey
	}
	return ""
}

func (x *CreatePolicyRequest) GetVersionText() string {
	if x != nil {
		return x.VersionText
	}
	return ""
}

func (x *CreatePolicyRequest) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

func (x *CreatePolicyRequest) GetMetadata() *CompiledPolicyMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CreatePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the policy creation. Was the text valid?
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	// The error message if the policy is invalid
	Error *v1.CompilationError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The policy ID as set in the database
	PolicyId string `protobuf:"bytes,3,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// The policy key
	PolicyKey string `protobuf:"bytes,4,opt,name=policy_key,json=policyKey,proto3" json:"policy_key,omitempty"`
	// The ID of the new policy version
	VersionId string `protobuf:"bytes,5,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// The dataset linked to the policy
	DatasetId *string `protobuf:"bytes,6,opt,name=dataset_id,json=datasetId,proto3,oneof" json:"dataset_id,omitempty"`
}

func (x *CreatePolicyResponse) Reset() {
	*x = CreatePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePolicyResponse) ProtoMessage() {}

func (x *CreatePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePolicyResponse.ProtoReflect.Descriptor instead.
func (*CreatePolicyResponse) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{30}
}

func (x *CreatePolicyResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *CreatePolicyResponse) GetError() *v1.CompilationError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreatePolicyResponse) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *CreatePolicyResponse) GetPolicyKey() string {
	if x != nil {
		return x.PolicyKey
	}
	return ""
}

func (x *CreatePolicyResponse) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *CreatePolicyResponse) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

type CreatePolicyVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The policy ID to add the version to
	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// The text to be compiled
	VersionText string `protobuf:"bytes,2,opt,name=version_text,json=versionText,proto3" json:"version_text,omitempty"`
	// metadata for the version
	Metadata *CompiledPolicyMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// If set to true, the version will immediately
	// become the active version of the policy
	Activate bool `protobuf:"varint,4,opt,name=activate,proto3" json:"activate,omitempty"`
}

func (x *CreatePolicyVersionRequest) Reset() {
	*x = CreatePolicyVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePolicyVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePolicyVersionRequest) ProtoMessage() {}

func (x *CreatePolicyVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePolicyVersionRequest.ProtoReflect.Descriptor instead.
func (*CreatePolicyVersionRequest) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{31}
}

func (x *CreatePolicyVersionRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *CreatePolicyVersionRequest) GetVersionText() string {
	if x != nil {
		return x.VersionText
	}
	return ""
}

func (x *CreatePolicyVersionRequest) GetMetadata() *CompiledPolicyMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreatePolicyVersionRequest) GetActivate() bool {
	if x != nil {
		return x.Activate
	}
	return false
}

type CreatePolicyVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the policy creation. Was the text valid?
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	// The error message if the policy is invalid
	Error *v1.CompilationError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The policy ID as set in the database
	PolicyId string `protobuf:"bytes,3,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// The policy key
	PolicyKey string `protobuf:"bytes,4,opt,name=policy_key,json=policyKey,proto3" json:"policy_key,omitempty"`
	// The ID of the new policy version
	VersionId string `protobuf:"bytes,5,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *CreatePolicyVersionResponse) Reset() {
	*x = CreatePolicyVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePolicyVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePolicyVersionResponse) ProtoMessage() {}

func (x *CreatePolicyVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePolicyVersionResponse.ProtoReflect.Descriptor instead.
func (*CreatePolicyVersionResponse) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{32}
}

func (x *CreatePolicyVersionResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *CreatePolicyVersionResponse) GetError() *v1.CompilationError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreatePolicyVersionResponse) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *CreatePolicyVersionResponse) GetPolicyKey() string {
	if x != nil {
		return x.PolicyKey
	}
	return ""
}

func (x *CreatePolicyVersionResponse) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

type GeneratePolicyTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CustomerId      string                   `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	PolicyId        string                   `protobuf:"bytes,3,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	PolicyVersionId string                   `protobuf:"bytes,4,opt,name=policy_version_id,json=policyVersionId,proto3" json:"policy_version_id,omitempty"`
	DatasetId       string                   `protobuf:"bytes,5,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	PolicyName      string                   `protobuf:"bytes,6,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	PolicyText      string                   `protobuf:"bytes,7,opt,name=policy_text,json=policyText,proto3" json:"policy_text,omitempty"`
	CreatedAt       *timestamppb.Timestamp   `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp   `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedBy       string                   `protobuf:"bytes,10,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	Status          GeneratePolicyTaskStatus `protobuf:"varint,12,opt,name=status,proto3,enum=clavata.gateway.v1.GeneratePolicyTaskStatus" json:"status,omitempty"`
	ArchivedAt      *timestamppb.Timestamp   `protobuf:"bytes,13,opt,name=archived_at,json=archivedAt,proto3" json:"archived_at,omitempty"`
}

func (x *GeneratePolicyTask) Reset() {
	*x = GeneratePolicyTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneratePolicyTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratePolicyTask) ProtoMessage() {}

func (x *GeneratePolicyTask) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratePolicyTask.ProtoReflect.Descriptor instead.
func (*GeneratePolicyTask) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{33}
}

func (x *GeneratePolicyTask) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GeneratePolicyTask) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *GeneratePolicyTask) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *GeneratePolicyTask) GetPolicyVersionId() string {
	if x != nil {
		return x.PolicyVersionId
	}
	return ""
}

func (x *GeneratePolicyTask) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *GeneratePolicyTask) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *GeneratePolicyTask) GetPolicyText() string {
	if x != nil {
		return x.PolicyText
	}
	return ""
}

func (x *GeneratePolicyTask) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GeneratePolicyTask) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *GeneratePolicyTask) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *GeneratePolicyTask) GetStatus() GeneratePolicyTaskStatus {
	if x != nil {
		return x.Status
	}
	return GeneratePolicyTaskStatus_UNSPECIFIED
}

func (x *GeneratePolicyTask) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

type GeneratePolicyFromDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId  string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	PolicyName string `protobuf:"bytes,2,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
}

func (x *GeneratePolicyFromDatasetRequest) Reset() {
	*x = GeneratePolicyFromDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneratePolicyFromDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratePolicyFromDatasetRequest) ProtoMessage() {}

func (x *GeneratePolicyFromDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratePolicyFromDatasetRequest.ProtoReflect.Descriptor instead.
func (*GeneratePolicyFromDatasetRequest) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{34}
}

func (x *GeneratePolicyFromDatasetRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *GeneratePolicyFromDatasetRequest) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

type GeneratePolicyFromDatasetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *GeneratePolicyTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *GeneratePolicyFromDatasetResponse) Reset() {
	*x = GeneratePolicyFromDatasetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneratePolicyFromDatasetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneratePolicyFromDatasetResponse) ProtoMessage() {}

func (x *GeneratePolicyFromDatasetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneratePolicyFromDatasetResponse.ProtoReflect.Descriptor instead.
func (*GeneratePolicyFromDatasetResponse) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{35}
}

func (x *GeneratePolicyFromDatasetResponse) GetTask() *GeneratePolicyTask {
	if x != nil {
		return x.Task
	}
	return nil
}

type ListGeneratePolicyTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListGeneratePolicyTasksRequest) Reset() {
	*x = ListGeneratePolicyTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGeneratePolicyTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGeneratePolicyTasksRequest) ProtoMessage() {}

func (x *ListGeneratePolicyTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGeneratePolicyTasksRequest.ProtoReflect.Descriptor instead.
func (*ListGeneratePolicyTasksRequest) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{36}
}

type ListGeneratePolicyTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*GeneratePolicyTask `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *ListGeneratePolicyTasksResponse) Reset() {
	*x = ListGeneratePolicyTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGeneratePolicyTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGeneratePolicyTasksResponse) ProtoMessage() {}

func (x *ListGeneratePolicyTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGeneratePolicyTasksResponse.ProtoReflect.Descriptor instead.
func (*ListGeneratePolicyTasksResponse) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{37}
}

func (x *ListGeneratePolicyTasksResponse) GetTasks() []*GeneratePolicyTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type ArchiveGeneratePolicyTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyTaskId string `protobuf:"bytes,1,opt,name=policy_task_id,json=policyTaskId,proto3" json:"policy_task_id,omitempty"`
}

func (x *ArchiveGeneratePolicyTaskRequest) Reset() {
	*x = ArchiveGeneratePolicyTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveGeneratePolicyTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveGeneratePolicyTaskRequest) ProtoMessage() {}

func (x *ArchiveGeneratePolicyTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveGeneratePolicyTaskRequest.ProtoReflect.Descriptor instead.
func (*ArchiveGeneratePolicyTaskRequest) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{38}
}

func (x *ArchiveGeneratePolicyTaskRequest) GetPolicyTaskId() string {
	if x != nil {
		return x.PolicyTaskId
	}
	return ""
}

type ArchiveGeneratePolicyTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *GeneratePolicyTask `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *ArchiveGeneratePolicyTaskResponse) Reset() {
	*x = ArchiveGeneratePolicyTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_gateway_v1_policies_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveGeneratePolicyTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveGeneratePolicyTaskResponse) ProtoMessage() {}

func (x *ArchiveGeneratePolicyTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_gateway_v1_policies_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveGeneratePolicyTaskResponse.ProtoReflect.Descriptor instead.
func (*ArchiveGeneratePolicyTaskResponse) Descriptor() ([]byte, []int) {
	return file_clavata_gateway_v1_policies_proto_rawDescGZIP(), []int{39}
}

func (x *ArchiveGeneratePolicyTaskResponse) GetTask() *GeneratePolicyTask {
	if x != nil {
		return x.Task
	}
	return nil
}

var File_clavata_gateway_v1_policies_proto protoreflect.FileDescriptor

var file_clavata_gateway_v1_policies_proto_rawDesc = []byte{
	0x0a, 0x21, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xfa, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x75, 0x6e, 0x67, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x45, 0x78, 0x70, 0x75, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x10,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x22, 0x82, 0x02, 0x0a, 0x12, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x50, 0x0a, 0x11, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x75, 0x6e, 0x67,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x45, 0x78, 0x70, 0x75, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x2f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x4b,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x4c, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0xee, 0x01, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x49, 0x0a, 0x14, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x58, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22,
	0x66, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x74, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x12, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x11, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x6c, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x67, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x50, 0x0a, 0x11, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x22, 0x6c, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x22, 0x69, 0x0a, 0x15, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x11, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x10, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x6e, 0x0a,
	0x16, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x9d, 0x01,
	0x0a, 0x1d, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x50, 0x0a, 0x11, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x88, 0x01,
	0x0a, 0x1e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x1b, 0x45, 0x78, 0x70, 0x75,
	0x6e, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x1c, 0x45, 0x78, 0x70, 0x75, 0x6e, 0x67,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x75, 0x6e, 0x67, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x70, 0x75, 0x6e, 0x67, 0x65,
	0x64, 0x22, 0x3e, 0x0a, 0x1d, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x75, 0x6e, 0x67, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x5b, 0x0a, 0x1e, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x75, 0x6e, 0x67, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x75, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x70, 0x75, 0x6e, 0x67, 0x65, 0x64, 0x22, 0x3a,
	0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x72, 0x61, 0x66, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x16, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x8f,
	0x01, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x10, 0xfa, 0xd2, 0xe4, 0x93,
	0x02, 0x0a, 0x12, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x48, 0x00, 0x52, 0x0b,
	0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x01, 0x52, 0x09, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64,
	0x22, 0xf3, 0x01, 0x0a, 0x21, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x57,
	0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12,
	0x41, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x01, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x97, 0x02, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x72, 0x61, 0x66, 0x74, 0x49, 0x64, 0x22,
	0x50, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xd2, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x46, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xf5, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xc0,
	0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x46, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x22, 0xc9, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x87, 0x04,
	0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x22, 0x62, 0x0a, 0x20, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x21, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x72, 0x6f,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x20, 0x0a, 0x1e,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5f,
	0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22,
	0x48, 0x0a, 0x20, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x21, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x2a, 0x6f, 0x0a, 0x18, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x32, 0xad, 0x10, 0x0a, 0x0f,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x58, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x24, 0x2e, 0x63,
	0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x2e, 0x63, 0x6c, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63,
	0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x0e, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x7f, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x63, 0x6c, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63,
	0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x79, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x75, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x75, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6c, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x75, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a, 0x16, 0x55,
	0x6e, 0x65, 0x78, 0x70, 0x75, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x65, 0x78, 0x70,
	0x75, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e,
	0x65, 0x78, 0x70, 0x75, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x0e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x29,
	0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x1a, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x35, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x57, 0x69, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x5d, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x25, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x61, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x27, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63,
	0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e,
	0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x88,
	0x01, 0x0a, 0x19, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x34, 0x2e, 0x63,
	0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x17, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x32, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6c, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a,
	0x01, 0x0a, 0x19, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x34, 0x2e, 0x63,
	0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x39, 0x5a, 0x37, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x61, 0x69, 0x2f, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2f, 0x6c, 0x69, 0x62,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_clavata_gateway_v1_policies_proto_rawDescOnce sync.Once
	file_clavata_gateway_v1_policies_proto_rawDescData = file_clavata_gateway_v1_policies_proto_rawDesc
)

func file_clavata_gateway_v1_policies_proto_rawDescGZIP() []byte {
	file_clavata_gateway_v1_policies_proto_rawDescOnce.Do(func() {
		file_clavata_gateway_v1_policies_proto_rawDescData = protoimpl.X.CompressGZIP(file_clavata_gateway_v1_policies_proto_rawDescData)
	})
	return file_clavata_gateway_v1_policies_proto_rawDescData
}

var file_clavata_gateway_v1_policies_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_clavata_gateway_v1_policies_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_clavata_gateway_v1_policies_proto_goTypes = []any{
	(GeneratePolicyTaskStatus)(0),             // 0: clavata.gateway.v1.GeneratePolicyTaskStatus
	(*PolicyQuery)(nil),                       // 1: clavata.gateway.v1.PolicyQuery
	(*PolicyVersionQuery)(nil),                // 2: clavata.gateway.v1.PolicyVersionQuery
	(*GetPolicyRequest)(nil),                  // 3: clavata.gateway.v1.GetPolicyRequest
	(*GetPolicyResponse)(nil),                 // 4: clavata.gateway.v1.GetPolicyResponse
	(*GetPoliciesRequest)(nil),                // 5: clavata.gateway.v1.GetPoliciesRequest
	(*GetPoliciesResponse)(nil),               // 6: clavata.gateway.v1.GetPoliciesResponse
	(*UpdatePolicyRequest)(nil),               // 7: clavata.gateway.v1.UpdatePolicyRequest
	(*UpdatePolicyResponse)(nil),              // 8: clavata.gateway.v1.UpdatePolicyResponse
	(*GetPolicyVersionsRequest)(nil),          // 9: clavata.gateway.v1.GetPolicyVersionsRequest
	(*GetPolicyVersionsResponse)(nil),         // 10: clavata.gateway.v1.GetPolicyVersionsResponse
	(*GetActivePolicyVersionsRequest)(nil),    // 11: clavata.gateway.v1.GetActivePolicyVersionsRequest
	(*GetActivePolicyVersionsResponse)(nil),   // 12: clavata.gateway.v1.GetActivePolicyVersionsResponse
	(*DeletePolicyRequest)(nil),               // 13: clavata.gateway.v1.DeletePolicyRequest
	(*DeletePolicyResponse)(nil),              // 14: clavata.gateway.v1.DeletePolicyResponse
	(*UndeletePolicyRequest)(nil),             // 15: clavata.gateway.v1.UndeletePolicyRequest
	(*UndeletePolicyResponse)(nil),            // 16: clavata.gateway.v1.UndeletePolicyResponse
	(*SetActivePolicyVersionRequest)(nil),     // 17: clavata.gateway.v1.SetActivePolicyVersionRequest
	(*SetActivePolicyVersionResponse)(nil),    // 18: clavata.gateway.v1.SetActivePolicyVersionResponse
	(*ExpungePolicyVersionRequest)(nil),       // 19: clavata.gateway.v1.ExpungePolicyVersionRequest
	(*ExpungePolicyVersionResponse)(nil),      // 20: clavata.gateway.v1.ExpungePolicyVersionResponse
	(*UnexpungePolicyVersionRequest)(nil),     // 21: clavata.gateway.v1.UnexpungePolicyVersionRequest
	(*UnexpungePolicyVersionResponse)(nil),    // 22: clavata.gateway.v1.UnexpungePolicyVersionResponse
	(*ValidatePolicyRequest)(nil),             // 23: clavata.gateway.v1.ValidatePolicyRequest
	(*ValidatePolicyResponse)(nil),            // 24: clavata.gateway.v1.ValidatePolicyResponse
	(*TestPolicyOptions)(nil),                 // 25: clavata.gateway.v1.TestPolicyOptions
	(*TestPolicyWithDatasetItemsRequest)(nil), // 26: clavata.gateway.v1.TestPolicyWithDatasetItemsRequest
	(*TestPolicyRequest)(nil),                 // 27: clavata.gateway.v1.TestPolicyRequest
	(*TestPolicyResponse)(nil),                // 28: clavata.gateway.v1.TestPolicyResponse
	(*CompiledPolicyMetadata)(nil),            // 29: clavata.gateway.v1.CompiledPolicyMetadata
	(*CreatePolicyRequest)(nil),               // 30: clavata.gateway.v1.CreatePolicyRequest
	(*CreatePolicyResponse)(nil),              // 31: clavata.gateway.v1.CreatePolicyResponse
	(*CreatePolicyVersionRequest)(nil),        // 32: clavata.gateway.v1.CreatePolicyVersionRequest
	(*CreatePolicyVersionResponse)(nil),       // 33: clavata.gateway.v1.CreatePolicyVersionResponse
	(*GeneratePolicyTask)(nil),                // 34: clavata.gateway.v1.GeneratePolicyTask
	(*GeneratePolicyFromDatasetRequest)(nil),  // 35: clavata.gateway.v1.GeneratePolicyFromDatasetRequest
	(*GeneratePolicyFromDatasetResponse)(nil), // 36: clavata.gateway.v1.GeneratePolicyFromDatasetResponse
	(*ListGeneratePolicyTasksRequest)(nil),    // 37: clavata.gateway.v1.ListGeneratePolicyTasksRequest
	(*ListGeneratePolicyTasksResponse)(nil),   // 38: clavata.gateway.v1.ListGeneratePolicyTasksResponse
	(*ArchiveGeneratePolicyTaskRequest)(nil),  // 39: clavata.gateway.v1.ArchiveGeneratePolicyTaskRequest
	(*ArchiveGeneratePolicyTaskResponse)(nil), // 40: clavata.gateway.v1.ArchiveGeneratePolicyTaskResponse
	(*v1.TimeRange)(nil),                      // 41: clavata.shared.v1.TimeRange
	(*v1.PolicyIdentifier)(nil),               // 42: clavata.shared.v1.PolicyIdentifier
	(*v1.Policy)(nil),                         // 43: clavata.shared.v1.Policy
	(*v1.PolicyVersion)(nil),                  // 44: clavata.shared.v1.PolicyVersion
	(*v1.CompilationError)(nil),               // 45: clavata.shared.v1.CompilationError
	(*v1.ContentData)(nil),                    // 46: clavata.shared.v1.ContentData
	(*v1.PolicyEvaluationReport)(nil),         // 47: clavata.shared.v1.PolicyEvaluationReport
	(*timestamppb.Timestamp)(nil),             // 48: google.protobuf.Timestamp
}
var file_clavata_gateway_v1_policies_proto_depIdxs = []int32{
	41, // 0: clavata.gateway.v1.PolicyQuery.created_time_range:type_name -> clavata.shared.v1.TimeRange
	41, // 1: clavata.gateway.v1.PolicyQuery.updated_time_range:type_name -> clavata.shared.v1.TimeRange
	42, // 2: clavata.gateway.v1.PolicyVersionQuery.policy_identifier:type_name -> clavata.shared.v1.PolicyIdentifier
	41, // 3: clavata.gateway.v1.PolicyVersionQuery.created_time_range:type_name -> clavata.shared.v1.TimeRange
	43, // 4: clavata.gateway.v1.GetPolicyResponse.policy:type_name -> clavata.shared.v1.Policy
	1,  // 5: clavata.gateway.v1.GetPoliciesRequest.query:type_name -> clavata.gateway.v1.PolicyQuery
	43, // 6: clavata.gateway.v1.GetPoliciesResponse.policies:type_name -> clavata.shared.v1.Policy
	42, // 7: clavata.gateway.v1.UpdatePolicyRequest.identifier:type_name -> clavata.shared.v1.PolicyIdentifier
	43, // 8: clavata.gateway.v1.UpdatePolicyResponse.policy:type_name -> clavata.shared.v1.Policy
	2,  // 9: clavata.gateway.v1.GetPolicyVersionsRequest.query:type_name -> clavata.gateway.v1.PolicyVersionQuery
	44, // 10: clavata.gateway.v1.GetPolicyVersionsResponse.policy_versions:type_name -> clavata.shared.v1.PolicyVersion
	42, // 11: clavata.gateway.v1.GetActivePolicyVersionsRequest.policy_identifiers:type_name -> clavata.shared.v1.PolicyIdentifier
	44, // 12: clavata.gateway.v1.GetActivePolicyVersionsResponse.policy_versions:type_name -> clavata.shared.v1.PolicyVersion
	42, // 13: clavata.gateway.v1.DeletePolicyRequest.policy_identifier:type_name -> clavata.shared.v1.PolicyIdentifier
	42, // 14: clavata.gateway.v1.UndeletePolicyRequest.policy_identifier:type_name -> clavata.shared.v1.PolicyIdentifier
	42, // 15: clavata.gateway.v1.SetActivePolicyVersionRequest.policy_identifier:type_name -> clavata.shared.v1.PolicyIdentifier
	45, // 16: clavata.gateway.v1.ValidatePolicyResponse.error:type_name -> clavata.shared.v1.CompilationError
	25, // 17: clavata.gateway.v1.TestPolicyWithDatasetItemsRequest.options:type_name -> clavata.gateway.v1.TestPolicyOptions
	46, // 18: clavata.gateway.v1.TestPolicyRequest.content_data:type_name -> clavata.shared.v1.ContentData
	25, // 19: clavata.gateway.v1.TestPolicyRequest.options:type_name -> clavata.gateway.v1.TestPolicyOptions
	45, // 20: clavata.gateway.v1.TestPolicyResponse.error:type_name -> clavata.shared.v1.CompilationError
	47, // 21: clavata.gateway.v1.TestPolicyResponse.report:type_name -> clavata.shared.v1.PolicyEvaluationReport
	29, // 22: clavata.gateway.v1.CreatePolicyRequest.metadata:type_name -> clavata.gateway.v1.CompiledPolicyMetadata
	45, // 23: clavata.gateway.v1.CreatePolicyResponse.error:type_name -> clavata.shared.v1.CompilationError
	29, // 24: clavata.gateway.v1.CreatePolicyVersionRequest.metadata:type_name -> clavata.gateway.v1.CompiledPolicyMetadata
	45, // 25: clavata.gateway.v1.CreatePolicyVersionResponse.error:type_name -> clavata.shared.v1.CompilationError
	48, // 26: clavata.gateway.v1.GeneratePolicyTask.created_at:type_name -> google.protobuf.Timestamp
	48, // 27: clavata.gateway.v1.GeneratePolicyTask.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 28: clavata.gateway.v1.GeneratePolicyTask.status:type_name -> clavata.gateway.v1.GeneratePolicyTaskStatus
	48, // 29: clavata.gateway.v1.GeneratePolicyTask.archived_at:type_name -> google.protobuf.Timestamp
	34, // 30: clavata.gateway.v1.GeneratePolicyFromDatasetResponse.task:type_name -> clavata.gateway.v1.GeneratePolicyTask
	34, // 31: clavata.gateway.v1.ListGeneratePolicyTasksResponse.tasks:type_name -> clavata.gateway.v1.GeneratePolicyTask
	34, // 32: clavata.gateway.v1.ArchiveGeneratePolicyTaskResponse.task:type_name -> clavata.gateway.v1.GeneratePolicyTask
	3,  // 33: clavata.gateway.v1.PoliciesService.GetPolicy:input_type -> clavata.gateway.v1.GetPolicyRequest
	5,  // 34: clavata.gateway.v1.PoliciesService.GetPolicies:input_type -> clavata.gateway.v1.GetPoliciesRequest
	7,  // 35: clavata.gateway.v1.PoliciesService.UpdatePolicy:input_type -> clavata.gateway.v1.UpdatePolicyRequest
	9,  // 36: clavata.gateway.v1.PoliciesService.GetPolicyVersions:input_type -> clavata.gateway.v1.GetPolicyVersionsRequest
	11, // 37: clavata.gateway.v1.PoliciesService.GetActivePolicyVersions:input_type -> clavata.gateway.v1.GetActivePolicyVersionsRequest
	13, // 38: clavata.gateway.v1.PoliciesService.DeletePolicy:input_type -> clavata.gateway.v1.DeletePolicyRequest
	15, // 39: clavata.gateway.v1.PoliciesService.UndeletePolicy:input_type -> clavata.gateway.v1.UndeletePolicyRequest
	17, // 40: clavata.gateway.v1.PoliciesService.SetActivePolicyVersion:input_type -> clavata.gateway.v1.SetActivePolicyVersionRequest
	19, // 41: clavata.gateway.v1.PoliciesService.ExpungePolicyVersion:input_type -> clavata.gateway.v1.ExpungePolicyVersionRequest
	21, // 42: clavata.gateway.v1.PoliciesService.UnexpungePolicyVersion:input_type -> clavata.gateway.v1.UnexpungePolicyVersionRequest
	23, // 43: clavata.gateway.v1.PoliciesService.ValidatePolicy:input_type -> clavata.gateway.v1.ValidatePolicyRequest
	26, // 44: clavata.gateway.v1.PoliciesService.TestPolicyWithDatasetItems:input_type -> clavata.gateway.v1.TestPolicyWithDatasetItemsRequest
	27, // 45: clavata.gateway.v1.PoliciesService.TestPolicy:input_type -> clavata.gateway.v1.TestPolicyRequest
	30, // 46: clavata.gateway.v1.PoliciesService.CreatePolicy:input_type -> clavata.gateway.v1.CreatePolicyRequest
	32, // 47: clavata.gateway.v1.PoliciesService.CreatePolicyVersion:input_type -> clavata.gateway.v1.CreatePolicyVersionRequest
	35, // 48: clavata.gateway.v1.PoliciesService.GeneratePolicyFromDataset:input_type -> clavata.gateway.v1.GeneratePolicyFromDatasetRequest
	37, // 49: clavata.gateway.v1.PoliciesService.ListGeneratePolicyTasks:input_type -> clavata.gateway.v1.ListGeneratePolicyTasksRequest
	39, // 50: clavata.gateway.v1.PoliciesService.ArchiveGeneratePolicyTask:input_type -> clavata.gateway.v1.ArchiveGeneratePolicyTaskRequest
	4,  // 51: clavata.gateway.v1.PoliciesService.GetPolicy:output_type -> clavata.gateway.v1.GetPolicyResponse
	6,  // 52: clavata.gateway.v1.PoliciesService.GetPolicies:output_type -> clavata.gateway.v1.GetPoliciesResponse
	8,  // 53: clavata.gateway.v1.PoliciesService.UpdatePolicy:output_type -> clavata.gateway.v1.UpdatePolicyResponse
	10, // 54: clavata.gateway.v1.PoliciesService.GetPolicyVersions:output_type -> clavata.gateway.v1.GetPolicyVersionsResponse
	12, // 55: clavata.gateway.v1.PoliciesService.GetActivePolicyVersions:output_type -> clavata.gateway.v1.GetActivePolicyVersionsResponse
	14, // 56: clavata.gateway.v1.PoliciesService.DeletePolicy:output_type -> clavata.gateway.v1.DeletePolicyResponse
	16, // 57: clavata.gateway.v1.PoliciesService.UndeletePolicy:output_type -> clavata.gateway.v1.UndeletePolicyResponse
	18, // 58: clavata.gateway.v1.PoliciesService.SetActivePolicyVersion:output_type -> clavata.gateway.v1.SetActivePolicyVersionResponse
	20, // 59: clavata.gateway.v1.PoliciesService.ExpungePolicyVersion:output_type -> clavata.gateway.v1.ExpungePolicyVersionResponse
	22, // 60: clavata.gateway.v1.PoliciesService.UnexpungePolicyVersion:output_type -> clavata.gateway.v1.UnexpungePolicyVersionResponse
	24, // 61: clavata.gateway.v1.PoliciesService.ValidatePolicy:output_type -> clavata.gateway.v1.ValidatePolicyResponse
	28, // 62: clavata.gateway.v1.PoliciesService.TestPolicyWithDatasetItems:output_type -> clavata.gateway.v1.TestPolicyResponse
	28, // 63: clavata.gateway.v1.PoliciesService.TestPolicy:output_type -> clavata.gateway.v1.TestPolicyResponse
	31, // 64: clavata.gateway.v1.PoliciesService.CreatePolicy:output_type -> clavata.gateway.v1.CreatePolicyResponse
	33, // 65: clavata.gateway.v1.PoliciesService.CreatePolicyVersion:output_type -> clavata.gateway.v1.CreatePolicyVersionResponse
	36, // 66: clavata.gateway.v1.PoliciesService.GeneratePolicyFromDataset:output_type -> clavata.gateway.v1.GeneratePolicyFromDatasetResponse
	38, // 67: clavata.gateway.v1.PoliciesService.ListGeneratePolicyTasks:output_type -> clavata.gateway.v1.ListGeneratePolicyTasksResponse
	40, // 68: clavata.gateway.v1.PoliciesService.ArchiveGeneratePolicyTask:output_type -> clavata.gateway.v1.ArchiveGeneratePolicyTaskResponse
	51, // [51:69] is the sub-list for method output_type
	33, // [33:51] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_clavata_gateway_v1_policies_proto_init() }
func file_clavata_gateway_v1_policies_proto_init() {
	if File_clavata_gateway_v1_policies_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_clavata_gateway_v1_policies_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyVersionQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetPolicyVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetPolicyVersionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetActivePolicyVersionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetActivePolicyVersionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*DeletePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*DeletePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*UndeletePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*UndeletePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*SetActivePolicyVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*SetActivePolicyVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ExpungePolicyVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ExpungePolicyVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*UnexpungePolicyVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*UnexpungePolicyVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*ValidatePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ValidatePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*TestPolicyOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*TestPolicyWithDatasetItemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*TestPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*TestPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*CompiledPolicyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePolicyVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePolicyVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*GeneratePolicyTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*GeneratePolicyFromDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*GeneratePolicyFromDatasetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*ListGeneratePolicyTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*ListGeneratePolicyTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*ArchiveGeneratePolicyTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_gateway_v1_policies_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*ArchiveGeneratePolicyTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_clavata_gateway_v1_policies_proto_msgTypes[6].OneofWrappers = []any{}
	file_clavata_gateway_v1_policies_proto_msgTypes[24].OneofWrappers = []any{}
	file_clavata_gateway_v1_policies_proto_msgTypes[25].OneofWrappers = []any{}
	file_clavata_gateway_v1_policies_proto_msgTypes[26].OneofWrappers = []any{}
	file_clavata_gateway_v1_policies_proto_msgTypes[29].OneofWrappers = []any{}
	file_clavata_gateway_v1_policies_proto_msgTypes[30].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_clavata_gateway_v1_policies_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_clavata_gateway_v1_policies_proto_goTypes,
		DependencyIndexes: file_clavata_gateway_v1_policies_proto_depIdxs,
		EnumInfos:         file_clavata_gateway_v1_policies_proto_enumTypes,
		MessageInfos:      file_clavata_gateway_v1_policies_proto_msgTypes,
	}.Build()
	File_clavata_gateway_v1_policies_proto = out.File
	file_clavata_gateway_v1_policies_proto_rawDesc = nil
	file_clavata_gateway_v1_policies_proto_goTypes = nil
	file_clavata_gateway_v1_policies_proto_depIdxs = nil
}
