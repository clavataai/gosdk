// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.3
// source: clavata/gateway/v1/datasets.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DatasetsService_ListDatasets_FullMethodName                = "/clavata.gateway.v1.DatasetsService/ListDatasets"
	DatasetsService_CreateDataset_FullMethodName               = "/clavata.gateway.v1.DatasetsService/CreateDataset"
	DatasetsService_AppendContentToDataset_FullMethodName      = "/clavata.gateway.v1.DatasetsService/AppendContentToDataset"
	DatasetsService_ListDatasetContent_FullMethodName          = "/clavata.gateway.v1.DatasetsService/ListDatasetContent"
	DatasetsService_GetDatasetContent_FullMethodName           = "/clavata.gateway.v1.DatasetsService/GetDatasetContent"
	DatasetsService_DeleteDataset_FullMethodName               = "/clavata.gateway.v1.DatasetsService/DeleteDataset"
	DatasetsService_RemoveFromDataset_FullMethodName           = "/clavata.gateway.v1.DatasetsService/RemoveFromDataset"
	DatasetsService_ListDatasetLabels_FullMethodName           = "/clavata.gateway.v1.DatasetsService/ListDatasetLabels"
	DatasetsService_UpdateDatasetItemLabels_FullMethodName     = "/clavata.gateway.v1.DatasetsService/UpdateDatasetItemLabels"
	DatasetsService_UpdateDataset_FullMethodName               = "/clavata.gateway.v1.DatasetsService/UpdateDataset"
	DatasetsService_ClonePublicDatasetToAccount_FullMethodName = "/clavata.gateway.v1.DatasetsService/ClonePublicDatasetToAccount"
	DatasetsService_AppendApiContentToDataset_FullMethodName   = "/clavata.gateway.v1.DatasetsService/AppendApiContentToDataset"
)

// DatasetsServiceClient is the client API for DatasetsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatasetsServiceClient interface {
	// List all datasets in the account
	ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*ListDatasetsResponse, error)
	// Create a dataset
	CreateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*CreateDatasetResponse, error)
	// Append content to a dataset
	AppendContentToDataset(ctx context.Context, in *AppendContentToDatasetRequest, opts ...grpc.CallOption) (*AppendContentToDatasetResponse, error)
	// List content in a dataset
	ListDatasetContent(ctx context.Context, in *ListDatasetContentRequest, opts ...grpc.CallOption) (*ListDatasetContentResponse, error)
	// Get content from a dataset
	GetDatasetContent(ctx context.Context, in *GetDatasetContentRequest, opts ...grpc.CallOption) (*GetDatasetContentResponse, error)
	// Delete a dataset
	DeleteDataset(ctx context.Context, in *DeleteDatasetRequest, opts ...grpc.CallOption) (*DeleteDatasetResponse, error)
	// Remove content from a dataset
	RemoveFromDataset(ctx context.Context, in *RemoveFromDatasetRequest, opts ...grpc.CallOption) (*RemoveFromDatasetResponse, error)
	// List labels in a dataset
	ListDatasetLabels(ctx context.Context, in *ListDatasetLabelsRequest, opts ...grpc.CallOption) (*ListDatasetLabelsResponse, error)
	// Update labels for a dataset item
	UpdateDatasetItemLabels(ctx context.Context, in *UpdateDatasetItemLabelsRequest, opts ...grpc.CallOption) (*UpdateDatasetItemLabelsResponse, error)
	// Update a dataset
	UpdateDataset(ctx context.Context, in *UpdateDatasetRequest, opts ...grpc.CallOption) (*UpdateDatasetResponse, error)
	// Clone a public dataset to the account
	ClonePublicDatasetToAccount(ctx context.Context, in *ClonePublicDatasetToAccountRequest, opts ...grpc.CallOption) (*ClonePublicDatasetToAccountResponse, error)
	// Take API content and add it to a dataset and customer content
	AppendApiContentToDataset(ctx context.Context, in *AppendApiContentToDatasetRequest, opts ...grpc.CallOption) (*AppendApiContentToDatasetResponse, error)
}

type datasetsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasetsServiceClient(cc grpc.ClientConnInterface) DatasetsServiceClient {
	return &datasetsServiceClient{cc}
}

func (c *datasetsServiceClient) ListDatasets(ctx context.Context, in *ListDatasetsRequest, opts ...grpc.CallOption) (*ListDatasetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDatasetsResponse)
	err := c.cc.Invoke(ctx, DatasetsService_ListDatasets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetsServiceClient) CreateDataset(ctx context.Context, in *CreateDatasetRequest, opts ...grpc.CallOption) (*CreateDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDatasetResponse)
	err := c.cc.Invoke(ctx, DatasetsService_CreateDataset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetsServiceClient) AppendContentToDataset(ctx context.Context, in *AppendContentToDatasetRequest, opts ...grpc.CallOption) (*AppendContentToDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendContentToDatasetResponse)
	err := c.cc.Invoke(ctx, DatasetsService_AppendContentToDataset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetsServiceClient) ListDatasetContent(ctx context.Context, in *ListDatasetContentRequest, opts ...grpc.CallOption) (*ListDatasetContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDatasetContentResponse)
	err := c.cc.Invoke(ctx, DatasetsService_ListDatasetContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetsServiceClient) GetDatasetContent(ctx context.Context, in *GetDatasetContentRequest, opts ...grpc.CallOption) (*GetDatasetContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDatasetContentResponse)
	err := c.cc.Invoke(ctx, DatasetsService_GetDatasetContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetsServiceClient) DeleteDataset(ctx context.Context, in *DeleteDatasetRequest, opts ...grpc.CallOption) (*DeleteDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDatasetResponse)
	err := c.cc.Invoke(ctx, DatasetsService_DeleteDataset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetsServiceClient) RemoveFromDataset(ctx context.Context, in *RemoveFromDatasetRequest, opts ...grpc.CallOption) (*RemoveFromDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFromDatasetResponse)
	err := c.cc.Invoke(ctx, DatasetsService_RemoveFromDataset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetsServiceClient) ListDatasetLabels(ctx context.Context, in *ListDatasetLabelsRequest, opts ...grpc.CallOption) (*ListDatasetLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDatasetLabelsResponse)
	err := c.cc.Invoke(ctx, DatasetsService_ListDatasetLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetsServiceClient) UpdateDatasetItemLabels(ctx context.Context, in *UpdateDatasetItemLabelsRequest, opts ...grpc.CallOption) (*UpdateDatasetItemLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDatasetItemLabelsResponse)
	err := c.cc.Invoke(ctx, DatasetsService_UpdateDatasetItemLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetsServiceClient) UpdateDataset(ctx context.Context, in *UpdateDatasetRequest, opts ...grpc.CallOption) (*UpdateDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDatasetResponse)
	err := c.cc.Invoke(ctx, DatasetsService_UpdateDataset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetsServiceClient) ClonePublicDatasetToAccount(ctx context.Context, in *ClonePublicDatasetToAccountRequest, opts ...grpc.CallOption) (*ClonePublicDatasetToAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClonePublicDatasetToAccountResponse)
	err := c.cc.Invoke(ctx, DatasetsService_ClonePublicDatasetToAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetsServiceClient) AppendApiContentToDataset(ctx context.Context, in *AppendApiContentToDatasetRequest, opts ...grpc.CallOption) (*AppendApiContentToDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendApiContentToDatasetResponse)
	err := c.cc.Invoke(ctx, DatasetsService_AppendApiContentToDataset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasetsServiceServer is the server API for DatasetsService service.
// All implementations must embed UnimplementedDatasetsServiceServer
// for forward compatibility
type DatasetsServiceServer interface {
	// List all datasets in the account
	ListDatasets(context.Context, *ListDatasetsRequest) (*ListDatasetsResponse, error)
	// Create a dataset
	CreateDataset(context.Context, *CreateDatasetRequest) (*CreateDatasetResponse, error)
	// Append content to a dataset
	AppendContentToDataset(context.Context, *AppendContentToDatasetRequest) (*AppendContentToDatasetResponse, error)
	// List content in a dataset
	ListDatasetContent(context.Context, *ListDatasetContentRequest) (*ListDatasetContentResponse, error)
	// Get content from a dataset
	GetDatasetContent(context.Context, *GetDatasetContentRequest) (*GetDatasetContentResponse, error)
	// Delete a dataset
	DeleteDataset(context.Context, *DeleteDatasetRequest) (*DeleteDatasetResponse, error)
	// Remove content from a dataset
	RemoveFromDataset(context.Context, *RemoveFromDatasetRequest) (*RemoveFromDatasetResponse, error)
	// List labels in a dataset
	ListDatasetLabels(context.Context, *ListDatasetLabelsRequest) (*ListDatasetLabelsResponse, error)
	// Update labels for a dataset item
	UpdateDatasetItemLabels(context.Context, *UpdateDatasetItemLabelsRequest) (*UpdateDatasetItemLabelsResponse, error)
	// Update a dataset
	UpdateDataset(context.Context, *UpdateDatasetRequest) (*UpdateDatasetResponse, error)
	// Clone a public dataset to the account
	ClonePublicDatasetToAccount(context.Context, *ClonePublicDatasetToAccountRequest) (*ClonePublicDatasetToAccountResponse, error)
	// Take API content and add it to a dataset and customer content
	AppendApiContentToDataset(context.Context, *AppendApiContentToDatasetRequest) (*AppendApiContentToDatasetResponse, error)
	mustEmbedUnimplementedDatasetsServiceServer()
}

// UnimplementedDatasetsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatasetsServiceServer struct {
}

func (UnimplementedDatasetsServiceServer) ListDatasets(context.Context, *ListDatasetsRequest) (*ListDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatasets not implemented")
}
func (UnimplementedDatasetsServiceServer) CreateDataset(context.Context, *CreateDatasetRequest) (*CreateDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataset not implemented")
}
func (UnimplementedDatasetsServiceServer) AppendContentToDataset(context.Context, *AppendContentToDatasetRequest) (*AppendContentToDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendContentToDataset not implemented")
}
func (UnimplementedDatasetsServiceServer) ListDatasetContent(context.Context, *ListDatasetContentRequest) (*ListDatasetContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatasetContent not implemented")
}
func (UnimplementedDatasetsServiceServer) GetDatasetContent(context.Context, *GetDatasetContentRequest) (*GetDatasetContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasetContent not implemented")
}
func (UnimplementedDatasetsServiceServer) DeleteDataset(context.Context, *DeleteDatasetRequest) (*DeleteDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDataset not implemented")
}
func (UnimplementedDatasetsServiceServer) RemoveFromDataset(context.Context, *RemoveFromDatasetRequest) (*RemoveFromDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromDataset not implemented")
}
func (UnimplementedDatasetsServiceServer) ListDatasetLabels(context.Context, *ListDatasetLabelsRequest) (*ListDatasetLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatasetLabels not implemented")
}
func (UnimplementedDatasetsServiceServer) UpdateDatasetItemLabels(context.Context, *UpdateDatasetItemLabelsRequest) (*UpdateDatasetItemLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatasetItemLabels not implemented")
}
func (UnimplementedDatasetsServiceServer) UpdateDataset(context.Context, *UpdateDatasetRequest) (*UpdateDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDataset not implemented")
}
func (UnimplementedDatasetsServiceServer) ClonePublicDatasetToAccount(context.Context, *ClonePublicDatasetToAccountRequest) (*ClonePublicDatasetToAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClonePublicDatasetToAccount not implemented")
}
func (UnimplementedDatasetsServiceServer) AppendApiContentToDataset(context.Context, *AppendApiContentToDatasetRequest) (*AppendApiContentToDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendApiContentToDataset not implemented")
}
func (UnimplementedDatasetsServiceServer) mustEmbedUnimplementedDatasetsServiceServer() {}

// UnsafeDatasetsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatasetsServiceServer will
// result in compilation errors.
type UnsafeDatasetsServiceServer interface {
	mustEmbedUnimplementedDatasetsServiceServer()
}

func RegisterDatasetsServiceServer(s grpc.ServiceRegistrar, srv DatasetsServiceServer) {
	s.RegisterService(&DatasetsService_ServiceDesc, srv)
}

func _DatasetsService_ListDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetsServiceServer).ListDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetsService_ListDatasets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetsServiceServer).ListDatasets(ctx, req.(*ListDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetsService_CreateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetsServiceServer).CreateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetsService_CreateDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetsServiceServer).CreateDataset(ctx, req.(*CreateDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetsService_AppendContentToDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendContentToDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetsServiceServer).AppendContentToDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetsService_AppendContentToDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetsServiceServer).AppendContentToDataset(ctx, req.(*AppendContentToDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetsService_ListDatasetContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetsServiceServer).ListDatasetContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetsService_ListDatasetContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetsServiceServer).ListDatasetContent(ctx, req.(*ListDatasetContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetsService_GetDatasetContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetsServiceServer).GetDatasetContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetsService_GetDatasetContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetsServiceServer).GetDatasetContent(ctx, req.(*GetDatasetContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetsService_DeleteDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetsServiceServer).DeleteDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetsService_DeleteDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetsServiceServer).DeleteDataset(ctx, req.(*DeleteDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetsService_RemoveFromDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFromDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetsServiceServer).RemoveFromDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetsService_RemoveFromDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetsServiceServer).RemoveFromDataset(ctx, req.(*RemoveFromDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetsService_ListDatasetLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatasetLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetsServiceServer).ListDatasetLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetsService_ListDatasetLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetsServiceServer).ListDatasetLabels(ctx, req.(*ListDatasetLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetsService_UpdateDatasetItemLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetItemLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetsServiceServer).UpdateDatasetItemLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetsService_UpdateDatasetItemLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetsServiceServer).UpdateDatasetItemLabels(ctx, req.(*UpdateDatasetItemLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetsService_UpdateDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetsServiceServer).UpdateDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetsService_UpdateDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetsServiceServer).UpdateDataset(ctx, req.(*UpdateDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetsService_ClonePublicDatasetToAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClonePublicDatasetToAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetsServiceServer).ClonePublicDatasetToAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetsService_ClonePublicDatasetToAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetsServiceServer).ClonePublicDatasetToAccount(ctx, req.(*ClonePublicDatasetToAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetsService_AppendApiContentToDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendApiContentToDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetsServiceServer).AppendApiContentToDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetsService_AppendApiContentToDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetsServiceServer).AppendApiContentToDataset(ctx, req.(*AppendApiContentToDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatasetsService_ServiceDesc is the grpc.ServiceDesc for DatasetsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatasetsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clavata.gateway.v1.DatasetsService",
	HandlerType: (*DatasetsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDatasets",
			Handler:    _DatasetsService_ListDatasets_Handler,
		},
		{
			MethodName: "CreateDataset",
			Handler:    _DatasetsService_CreateDataset_Handler,
		},
		{
			MethodName: "AppendContentToDataset",
			Handler:    _DatasetsService_AppendContentToDataset_Handler,
		},
		{
			MethodName: "ListDatasetContent",
			Handler:    _DatasetsService_ListDatasetContent_Handler,
		},
		{
			MethodName: "GetDatasetContent",
			Handler:    _DatasetsService_GetDatasetContent_Handler,
		},
		{
			MethodName: "DeleteDataset",
			Handler:    _DatasetsService_DeleteDataset_Handler,
		},
		{
			MethodName: "RemoveFromDataset",
			Handler:    _DatasetsService_RemoveFromDataset_Handler,
		},
		{
			MethodName: "ListDatasetLabels",
			Handler:    _DatasetsService_ListDatasetLabels_Handler,
		},
		{
			MethodName: "UpdateDatasetItemLabels",
			Handler:    _DatasetsService_UpdateDatasetItemLabels_Handler,
		},
		{
			MethodName: "UpdateDataset",
			Handler:    _DatasetsService_UpdateDataset_Handler,
		},
		{
			MethodName: "ClonePublicDatasetToAccount",
			Handler:    _DatasetsService_ClonePublicDatasetToAccount_Handler,
		},
		{
			MethodName: "AppendApiContentToDataset",
			Handler:    _DatasetsService_AppendApiContentToDataset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clavata/gateway/v1/datasets.proto",
}
