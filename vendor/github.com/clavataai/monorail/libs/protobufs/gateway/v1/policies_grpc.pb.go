// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.3
// source: clavata/gateway/v1/policies.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PoliciesService_GetPolicy_FullMethodName                  = "/clavata.gateway.v1.PoliciesService/GetPolicy"
	PoliciesService_GetPolicies_FullMethodName                = "/clavata.gateway.v1.PoliciesService/GetPolicies"
	PoliciesService_UpdatePolicy_FullMethodName               = "/clavata.gateway.v1.PoliciesService/UpdatePolicy"
	PoliciesService_GetPolicyVersions_FullMethodName          = "/clavata.gateway.v1.PoliciesService/GetPolicyVersions"
	PoliciesService_GetActivePolicyVersions_FullMethodName    = "/clavata.gateway.v1.PoliciesService/GetActivePolicyVersions"
	PoliciesService_DeletePolicy_FullMethodName               = "/clavata.gateway.v1.PoliciesService/DeletePolicy"
	PoliciesService_UndeletePolicy_FullMethodName             = "/clavata.gateway.v1.PoliciesService/UndeletePolicy"
	PoliciesService_SetActivePolicyVersion_FullMethodName     = "/clavata.gateway.v1.PoliciesService/SetActivePolicyVersion"
	PoliciesService_ExpungePolicyVersion_FullMethodName       = "/clavata.gateway.v1.PoliciesService/ExpungePolicyVersion"
	PoliciesService_UnexpungePolicyVersion_FullMethodName     = "/clavata.gateway.v1.PoliciesService/UnexpungePolicyVersion"
	PoliciesService_ValidatePolicy_FullMethodName             = "/clavata.gateway.v1.PoliciesService/ValidatePolicy"
	PoliciesService_TestPolicyWithDatasetItems_FullMethodName = "/clavata.gateway.v1.PoliciesService/TestPolicyWithDatasetItems"
	PoliciesService_TestPolicy_FullMethodName                 = "/clavata.gateway.v1.PoliciesService/TestPolicy"
	PoliciesService_CreatePolicy_FullMethodName               = "/clavata.gateway.v1.PoliciesService/CreatePolicy"
	PoliciesService_CreatePolicyVersion_FullMethodName        = "/clavata.gateway.v1.PoliciesService/CreatePolicyVersion"
	PoliciesService_GeneratePolicyFromDataset_FullMethodName  = "/clavata.gateway.v1.PoliciesService/GeneratePolicyFromDataset"
	PoliciesService_ListGeneratePolicyTasks_FullMethodName    = "/clavata.gateway.v1.PoliciesService/ListGeneratePolicyTasks"
	PoliciesService_ArchiveGeneratePolicyTask_FullMethodName  = "/clavata.gateway.v1.PoliciesService/ArchiveGeneratePolicyTask"
)

// PoliciesServiceClient is the client API for PoliciesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoliciesServiceClient interface {
	// Get a policy by its policy ID or key
	GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error)
	// Get all policies in the account
	GetPolicies(ctx context.Context, in *GetPoliciesRequest, opts ...grpc.CallOption) (*GetPoliciesResponse, error)
	// Update a policy by its policy ID or key
	UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*UpdatePolicyResponse, error)
	// Get all versions of a policy
	GetPolicyVersions(ctx context.Context, in *GetPolicyVersionsRequest, opts ...grpc.CallOption) (*GetPolicyVersionsResponse, error)
	// Get the active version of a policy
	GetActivePolicyVersions(ctx context.Context, in *GetActivePolicyVersionsRequest, opts ...grpc.CallOption) (*GetActivePolicyVersionsResponse, error)
	// Delete a policy by its policy ID or key
	DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*DeletePolicyResponse, error)
	// Undelete a policy by its policy ID or key
	UndeletePolicy(ctx context.Context, in *UndeletePolicyRequest, opts ...grpc.CallOption) (*UndeletePolicyResponse, error)
	// Set the active version of a policy
	SetActivePolicyVersion(ctx context.Context, in *SetActivePolicyVersionRequest, opts ...grpc.CallOption) (*SetActivePolicyVersionResponse, error)
	// Expunge a policy version by its version ID
	ExpungePolicyVersion(ctx context.Context, in *ExpungePolicyVersionRequest, opts ...grpc.CallOption) (*ExpungePolicyVersionResponse, error)
	// Unexpunge a policy version by its version ID
	UnexpungePolicyVersion(ctx context.Context, in *UnexpungePolicyVersionRequest, opts ...grpc.CallOption) (*UnexpungePolicyVersionResponse, error)
	// Validate a policy draft
	ValidatePolicy(ctx context.Context, in *ValidatePolicyRequest, opts ...grpc.CallOption) (*ValidatePolicyResponse, error)
	// Test a policy with a dataset item
	TestPolicyWithDatasetItems(ctx context.Context, in *TestPolicyWithDatasetItemsRequest, opts ...grpc.CallOption) (PoliciesService_TestPolicyWithDatasetItemsClient, error)
	// Test a policy with content data
	TestPolicy(ctx context.Context, in *TestPolicyRequest, opts ...grpc.CallOption) (PoliciesService_TestPolicyClient, error)
	// Create a policy
	CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*CreatePolicyResponse, error)
	// Create a policy version
	CreatePolicyVersion(ctx context.Context, in *CreatePolicyVersionRequest, opts ...grpc.CallOption) (*CreatePolicyVersionResponse, error)
	// Generate a policy from a dataset
	GeneratePolicyFromDataset(ctx context.Context, in *GeneratePolicyFromDatasetRequest, opts ...grpc.CallOption) (*GeneratePolicyFromDatasetResponse, error)
	// List all generate policy tasks
	ListGeneratePolicyTasks(ctx context.Context, in *ListGeneratePolicyTasksRequest, opts ...grpc.CallOption) (*ListGeneratePolicyTasksResponse, error)
	// Archive a generate policy task
	ArchiveGeneratePolicyTask(ctx context.Context, in *ArchiveGeneratePolicyTaskRequest, opts ...grpc.CallOption) (*ArchiveGeneratePolicyTaskResponse, error)
}

type policiesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPoliciesServiceClient(cc grpc.ClientConnInterface) PoliciesServiceClient {
	return &policiesServiceClient{cc}
}

func (c *policiesServiceClient) GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPolicyResponse)
	err := c.cc.Invoke(ctx, PoliciesService_GetPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesServiceClient) GetPolicies(ctx context.Context, in *GetPoliciesRequest, opts ...grpc.CallOption) (*GetPoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPoliciesResponse)
	err := c.cc.Invoke(ctx, PoliciesService_GetPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesServiceClient) UpdatePolicy(ctx context.Context, in *UpdatePolicyRequest, opts ...grpc.CallOption) (*UpdatePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePolicyResponse)
	err := c.cc.Invoke(ctx, PoliciesService_UpdatePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesServiceClient) GetPolicyVersions(ctx context.Context, in *GetPolicyVersionsRequest, opts ...grpc.CallOption) (*GetPolicyVersionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPolicyVersionsResponse)
	err := c.cc.Invoke(ctx, PoliciesService_GetPolicyVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesServiceClient) GetActivePolicyVersions(ctx context.Context, in *GetActivePolicyVersionsRequest, opts ...grpc.CallOption) (*GetActivePolicyVersionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActivePolicyVersionsResponse)
	err := c.cc.Invoke(ctx, PoliciesService_GetActivePolicyVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesServiceClient) DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*DeletePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePolicyResponse)
	err := c.cc.Invoke(ctx, PoliciesService_DeletePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesServiceClient) UndeletePolicy(ctx context.Context, in *UndeletePolicyRequest, opts ...grpc.CallOption) (*UndeletePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UndeletePolicyResponse)
	err := c.cc.Invoke(ctx, PoliciesService_UndeletePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesServiceClient) SetActivePolicyVersion(ctx context.Context, in *SetActivePolicyVersionRequest, opts ...grpc.CallOption) (*SetActivePolicyVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetActivePolicyVersionResponse)
	err := c.cc.Invoke(ctx, PoliciesService_SetActivePolicyVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesServiceClient) ExpungePolicyVersion(ctx context.Context, in *ExpungePolicyVersionRequest, opts ...grpc.CallOption) (*ExpungePolicyVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExpungePolicyVersionResponse)
	err := c.cc.Invoke(ctx, PoliciesService_ExpungePolicyVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesServiceClient) UnexpungePolicyVersion(ctx context.Context, in *UnexpungePolicyVersionRequest, opts ...grpc.CallOption) (*UnexpungePolicyVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnexpungePolicyVersionResponse)
	err := c.cc.Invoke(ctx, PoliciesService_UnexpungePolicyVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesServiceClient) ValidatePolicy(ctx context.Context, in *ValidatePolicyRequest, opts ...grpc.CallOption) (*ValidatePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidatePolicyResponse)
	err := c.cc.Invoke(ctx, PoliciesService_ValidatePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesServiceClient) TestPolicyWithDatasetItems(ctx context.Context, in *TestPolicyWithDatasetItemsRequest, opts ...grpc.CallOption) (PoliciesService_TestPolicyWithDatasetItemsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PoliciesService_ServiceDesc.Streams[0], PoliciesService_TestPolicyWithDatasetItems_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &policiesServiceTestPolicyWithDatasetItemsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PoliciesService_TestPolicyWithDatasetItemsClient interface {
	Recv() (*TestPolicyResponse, error)
	grpc.ClientStream
}

type policiesServiceTestPolicyWithDatasetItemsClient struct {
	grpc.ClientStream
}

func (x *policiesServiceTestPolicyWithDatasetItemsClient) Recv() (*TestPolicyResponse, error) {
	m := new(TestPolicyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *policiesServiceClient) TestPolicy(ctx context.Context, in *TestPolicyRequest, opts ...grpc.CallOption) (PoliciesService_TestPolicyClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PoliciesService_ServiceDesc.Streams[1], PoliciesService_TestPolicy_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &policiesServiceTestPolicyClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PoliciesService_TestPolicyClient interface {
	Recv() (*TestPolicyResponse, error)
	grpc.ClientStream
}

type policiesServiceTestPolicyClient struct {
	grpc.ClientStream
}

func (x *policiesServiceTestPolicyClient) Recv() (*TestPolicyResponse, error) {
	m := new(TestPolicyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *policiesServiceClient) CreatePolicy(ctx context.Context, in *CreatePolicyRequest, opts ...grpc.CallOption) (*CreatePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePolicyResponse)
	err := c.cc.Invoke(ctx, PoliciesService_CreatePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesServiceClient) CreatePolicyVersion(ctx context.Context, in *CreatePolicyVersionRequest, opts ...grpc.CallOption) (*CreatePolicyVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePolicyVersionResponse)
	err := c.cc.Invoke(ctx, PoliciesService_CreatePolicyVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesServiceClient) GeneratePolicyFromDataset(ctx context.Context, in *GeneratePolicyFromDatasetRequest, opts ...grpc.CallOption) (*GeneratePolicyFromDatasetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneratePolicyFromDatasetResponse)
	err := c.cc.Invoke(ctx, PoliciesService_GeneratePolicyFromDataset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesServiceClient) ListGeneratePolicyTasks(ctx context.Context, in *ListGeneratePolicyTasksRequest, opts ...grpc.CallOption) (*ListGeneratePolicyTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGeneratePolicyTasksResponse)
	err := c.cc.Invoke(ctx, PoliciesService_ListGeneratePolicyTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policiesServiceClient) ArchiveGeneratePolicyTask(ctx context.Context, in *ArchiveGeneratePolicyTaskRequest, opts ...grpc.CallOption) (*ArchiveGeneratePolicyTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArchiveGeneratePolicyTaskResponse)
	err := c.cc.Invoke(ctx, PoliciesService_ArchiveGeneratePolicyTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoliciesServiceServer is the server API for PoliciesService service.
// All implementations must embed UnimplementedPoliciesServiceServer
// for forward compatibility
type PoliciesServiceServer interface {
	// Get a policy by its policy ID or key
	GetPolicy(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error)
	// Get all policies in the account
	GetPolicies(context.Context, *GetPoliciesRequest) (*GetPoliciesResponse, error)
	// Update a policy by its policy ID or key
	UpdatePolicy(context.Context, *UpdatePolicyRequest) (*UpdatePolicyResponse, error)
	// Get all versions of a policy
	GetPolicyVersions(context.Context, *GetPolicyVersionsRequest) (*GetPolicyVersionsResponse, error)
	// Get the active version of a policy
	GetActivePolicyVersions(context.Context, *GetActivePolicyVersionsRequest) (*GetActivePolicyVersionsResponse, error)
	// Delete a policy by its policy ID or key
	DeletePolicy(context.Context, *DeletePolicyRequest) (*DeletePolicyResponse, error)
	// Undelete a policy by its policy ID or key
	UndeletePolicy(context.Context, *UndeletePolicyRequest) (*UndeletePolicyResponse, error)
	// Set the active version of a policy
	SetActivePolicyVersion(context.Context, *SetActivePolicyVersionRequest) (*SetActivePolicyVersionResponse, error)
	// Expunge a policy version by its version ID
	ExpungePolicyVersion(context.Context, *ExpungePolicyVersionRequest) (*ExpungePolicyVersionResponse, error)
	// Unexpunge a policy version by its version ID
	UnexpungePolicyVersion(context.Context, *UnexpungePolicyVersionRequest) (*UnexpungePolicyVersionResponse, error)
	// Validate a policy draft
	ValidatePolicy(context.Context, *ValidatePolicyRequest) (*ValidatePolicyResponse, error)
	// Test a policy with a dataset item
	TestPolicyWithDatasetItems(*TestPolicyWithDatasetItemsRequest, PoliciesService_TestPolicyWithDatasetItemsServer) error
	// Test a policy with content data
	TestPolicy(*TestPolicyRequest, PoliciesService_TestPolicyServer) error
	// Create a policy
	CreatePolicy(context.Context, *CreatePolicyRequest) (*CreatePolicyResponse, error)
	// Create a policy version
	CreatePolicyVersion(context.Context, *CreatePolicyVersionRequest) (*CreatePolicyVersionResponse, error)
	// Generate a policy from a dataset
	GeneratePolicyFromDataset(context.Context, *GeneratePolicyFromDatasetRequest) (*GeneratePolicyFromDatasetResponse, error)
	// List all generate policy tasks
	ListGeneratePolicyTasks(context.Context, *ListGeneratePolicyTasksRequest) (*ListGeneratePolicyTasksResponse, error)
	// Archive a generate policy task
	ArchiveGeneratePolicyTask(context.Context, *ArchiveGeneratePolicyTaskRequest) (*ArchiveGeneratePolicyTaskResponse, error)
	mustEmbedUnimplementedPoliciesServiceServer()
}

// UnimplementedPoliciesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPoliciesServiceServer struct {
}

func (UnimplementedPoliciesServiceServer) GetPolicy(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedPoliciesServiceServer) GetPolicies(context.Context, *GetPoliciesRequest) (*GetPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicies not implemented")
}
func (UnimplementedPoliciesServiceServer) UpdatePolicy(context.Context, *UpdatePolicyRequest) (*UpdatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (UnimplementedPoliciesServiceServer) GetPolicyVersions(context.Context, *GetPolicyVersionsRequest) (*GetPolicyVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyVersions not implemented")
}
func (UnimplementedPoliciesServiceServer) GetActivePolicyVersions(context.Context, *GetActivePolicyVersionsRequest) (*GetActivePolicyVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivePolicyVersions not implemented")
}
func (UnimplementedPoliciesServiceServer) DeletePolicy(context.Context, *DeletePolicyRequest) (*DeletePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (UnimplementedPoliciesServiceServer) UndeletePolicy(context.Context, *UndeletePolicyRequest) (*UndeletePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeletePolicy not implemented")
}
func (UnimplementedPoliciesServiceServer) SetActivePolicyVersion(context.Context, *SetActivePolicyVersionRequest) (*SetActivePolicyVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActivePolicyVersion not implemented")
}
func (UnimplementedPoliciesServiceServer) ExpungePolicyVersion(context.Context, *ExpungePolicyVersionRequest) (*ExpungePolicyVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpungePolicyVersion not implemented")
}
func (UnimplementedPoliciesServiceServer) UnexpungePolicyVersion(context.Context, *UnexpungePolicyVersionRequest) (*UnexpungePolicyVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnexpungePolicyVersion not implemented")
}
func (UnimplementedPoliciesServiceServer) ValidatePolicy(context.Context, *ValidatePolicyRequest) (*ValidatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePolicy not implemented")
}
func (UnimplementedPoliciesServiceServer) TestPolicyWithDatasetItems(*TestPolicyWithDatasetItemsRequest, PoliciesService_TestPolicyWithDatasetItemsServer) error {
	return status.Errorf(codes.Unimplemented, "method TestPolicyWithDatasetItems not implemented")
}
func (UnimplementedPoliciesServiceServer) TestPolicy(*TestPolicyRequest, PoliciesService_TestPolicyServer) error {
	return status.Errorf(codes.Unimplemented, "method TestPolicy not implemented")
}
func (UnimplementedPoliciesServiceServer) CreatePolicy(context.Context, *CreatePolicyRequest) (*CreatePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (UnimplementedPoliciesServiceServer) CreatePolicyVersion(context.Context, *CreatePolicyVersionRequest) (*CreatePolicyVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicyVersion not implemented")
}
func (UnimplementedPoliciesServiceServer) GeneratePolicyFromDataset(context.Context, *GeneratePolicyFromDatasetRequest) (*GeneratePolicyFromDatasetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePolicyFromDataset not implemented")
}
func (UnimplementedPoliciesServiceServer) ListGeneratePolicyTasks(context.Context, *ListGeneratePolicyTasksRequest) (*ListGeneratePolicyTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGeneratePolicyTasks not implemented")
}
func (UnimplementedPoliciesServiceServer) ArchiveGeneratePolicyTask(context.Context, *ArchiveGeneratePolicyTaskRequest) (*ArchiveGeneratePolicyTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveGeneratePolicyTask not implemented")
}
func (UnimplementedPoliciesServiceServer) mustEmbedUnimplementedPoliciesServiceServer() {}

// UnsafePoliciesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoliciesServiceServer will
// result in compilation errors.
type UnsafePoliciesServiceServer interface {
	mustEmbedUnimplementedPoliciesServiceServer()
}

func RegisterPoliciesServiceServer(s grpc.ServiceRegistrar, srv PoliciesServiceServer) {
	s.RegisterService(&PoliciesService_ServiceDesc, srv)
}

func _PoliciesService_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServiceServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoliciesService_GetPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServiceServer).GetPolicy(ctx, req.(*GetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoliciesService_GetPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServiceServer).GetPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoliciesService_GetPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServiceServer).GetPolicies(ctx, req.(*GetPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoliciesService_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServiceServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoliciesService_UpdatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServiceServer).UpdatePolicy(ctx, req.(*UpdatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoliciesService_GetPolicyVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServiceServer).GetPolicyVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoliciesService_GetPolicyVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServiceServer).GetPolicyVersions(ctx, req.(*GetPolicyVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoliciesService_GetActivePolicyVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivePolicyVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServiceServer).GetActivePolicyVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoliciesService_GetActivePolicyVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServiceServer).GetActivePolicyVersions(ctx, req.(*GetActivePolicyVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoliciesService_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServiceServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoliciesService_DeletePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServiceServer).DeletePolicy(ctx, req.(*DeletePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoliciesService_UndeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeletePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServiceServer).UndeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoliciesService_UndeletePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServiceServer).UndeletePolicy(ctx, req.(*UndeletePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoliciesService_SetActivePolicyVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetActivePolicyVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServiceServer).SetActivePolicyVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoliciesService_SetActivePolicyVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServiceServer).SetActivePolicyVersion(ctx, req.(*SetActivePolicyVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoliciesService_ExpungePolicyVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpungePolicyVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServiceServer).ExpungePolicyVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoliciesService_ExpungePolicyVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServiceServer).ExpungePolicyVersion(ctx, req.(*ExpungePolicyVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoliciesService_UnexpungePolicyVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnexpungePolicyVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServiceServer).UnexpungePolicyVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoliciesService_UnexpungePolicyVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServiceServer).UnexpungePolicyVersion(ctx, req.(*UnexpungePolicyVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoliciesService_ValidatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServiceServer).ValidatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoliciesService_ValidatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServiceServer).ValidatePolicy(ctx, req.(*ValidatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoliciesService_TestPolicyWithDatasetItems_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TestPolicyWithDatasetItemsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PoliciesServiceServer).TestPolicyWithDatasetItems(m, &policiesServiceTestPolicyWithDatasetItemsServer{ServerStream: stream})
}

type PoliciesService_TestPolicyWithDatasetItemsServer interface {
	Send(*TestPolicyResponse) error
	grpc.ServerStream
}

type policiesServiceTestPolicyWithDatasetItemsServer struct {
	grpc.ServerStream
}

func (x *policiesServiceTestPolicyWithDatasetItemsServer) Send(m *TestPolicyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PoliciesService_TestPolicy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TestPolicyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PoliciesServiceServer).TestPolicy(m, &policiesServiceTestPolicyServer{ServerStream: stream})
}

type PoliciesService_TestPolicyServer interface {
	Send(*TestPolicyResponse) error
	grpc.ServerStream
}

type policiesServiceTestPolicyServer struct {
	grpc.ServerStream
}

func (x *policiesServiceTestPolicyServer) Send(m *TestPolicyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PoliciesService_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServiceServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoliciesService_CreatePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServiceServer).CreatePolicy(ctx, req.(*CreatePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoliciesService_CreatePolicyVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServiceServer).CreatePolicyVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoliciesService_CreatePolicyVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServiceServer).CreatePolicyVersion(ctx, req.(*CreatePolicyVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoliciesService_GeneratePolicyFromDataset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneratePolicyFromDatasetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServiceServer).GeneratePolicyFromDataset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoliciesService_GeneratePolicyFromDataset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServiceServer).GeneratePolicyFromDataset(ctx, req.(*GeneratePolicyFromDatasetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoliciesService_ListGeneratePolicyTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGeneratePolicyTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServiceServer).ListGeneratePolicyTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoliciesService_ListGeneratePolicyTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServiceServer).ListGeneratePolicyTasks(ctx, req.(*ListGeneratePolicyTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoliciesService_ArchiveGeneratePolicyTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveGeneratePolicyTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliciesServiceServer).ArchiveGeneratePolicyTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoliciesService_ArchiveGeneratePolicyTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliciesServiceServer).ArchiveGeneratePolicyTask(ctx, req.(*ArchiveGeneratePolicyTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PoliciesService_ServiceDesc is the grpc.ServiceDesc for PoliciesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PoliciesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clavata.gateway.v1.PoliciesService",
	HandlerType: (*PoliciesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPolicy",
			Handler:    _PoliciesService_GetPolicy_Handler,
		},
		{
			MethodName: "GetPolicies",
			Handler:    _PoliciesService_GetPolicies_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _PoliciesService_UpdatePolicy_Handler,
		},
		{
			MethodName: "GetPolicyVersions",
			Handler:    _PoliciesService_GetPolicyVersions_Handler,
		},
		{
			MethodName: "GetActivePolicyVersions",
			Handler:    _PoliciesService_GetActivePolicyVersions_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _PoliciesService_DeletePolicy_Handler,
		},
		{
			MethodName: "UndeletePolicy",
			Handler:    _PoliciesService_UndeletePolicy_Handler,
		},
		{
			MethodName: "SetActivePolicyVersion",
			Handler:    _PoliciesService_SetActivePolicyVersion_Handler,
		},
		{
			MethodName: "ExpungePolicyVersion",
			Handler:    _PoliciesService_ExpungePolicyVersion_Handler,
		},
		{
			MethodName: "UnexpungePolicyVersion",
			Handler:    _PoliciesService_UnexpungePolicyVersion_Handler,
		},
		{
			MethodName: "ValidatePolicy",
			Handler:    _PoliciesService_ValidatePolicy_Handler,
		},
		{
			MethodName: "CreatePolicy",
			Handler:    _PoliciesService_CreatePolicy_Handler,
		},
		{
			MethodName: "CreatePolicyVersion",
			Handler:    _PoliciesService_CreatePolicyVersion_Handler,
		},
		{
			MethodName: "GeneratePolicyFromDataset",
			Handler:    _PoliciesService_GeneratePolicyFromDataset_Handler,
		},
		{
			MethodName: "ListGeneratePolicyTasks",
			Handler:    _PoliciesService_ListGeneratePolicyTasks_Handler,
		},
		{
			MethodName: "ArchiveGeneratePolicyTask",
			Handler:    _PoliciesService_ArchiveGeneratePolicyTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TestPolicyWithDatasetItems",
			Handler:       _PoliciesService_TestPolicyWithDatasetItems_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TestPolicy",
			Handler:       _PoliciesService_TestPolicy_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "clavata/gateway/v1/policies.proto",
}
