// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.3
// source: clavata/gateway/v1/content.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ContentService_AddToCustomerContent_FullMethodName      = "/clavata.gateway.v1.ContentService/AddToCustomerContent"
	ContentService_GetCustomerContent_FullMethodName        = "/clavata.gateway.v1.ContentService/GetCustomerContent"
	ContentService_DeleteFromCustomerContent_FullMethodName = "/clavata.gateway.v1.ContentService/DeleteFromCustomerContent"
	ContentService_UpdateCustomerContents_FullMethodName    = "/clavata.gateway.v1.ContentService/UpdateCustomerContents"
	ContentService_ListCustomerContent_FullMethodName       = "/clavata.gateway.v1.ContentService/ListCustomerContent"
	ContentService_ListCustomerContentLabels_FullMethodName = "/clavata.gateway.v1.ContentService/ListCustomerContentLabels"
)

// ContentServiceClient is the client API for ContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentServiceClient interface {
	// Add content to customer content
	AddToCustomerContent(ctx context.Context, in *AddToCustomerContentRequest, opts ...grpc.CallOption) (*AddToCustomerContentResponse, error)
	// Get customer content
	GetCustomerContent(ctx context.Context, in *GetCustomerContentRequest, opts ...grpc.CallOption) (*GetCustomerContentResponse, error)
	// Delete content from customer content
	DeleteFromCustomerContent(ctx context.Context, in *DeleteFromCustomerContentRequest, opts ...grpc.CallOption) (*DeleteFromCustomerContentResponse, error)
	// Update customer content
	UpdateCustomerContents(ctx context.Context, in *UpdateCustomerContentsRequest, opts ...grpc.CallOption) (*UpdateCustomerContentsResponse, error)
	// List customer content
	ListCustomerContent(ctx context.Context, in *ListCustomerContentRequest, opts ...grpc.CallOption) (*ListCustomerContentResponse, error)
	// List customer content labels
	ListCustomerContentLabels(ctx context.Context, in *ListCustomerContentLabelsRequest, opts ...grpc.CallOption) (*ListCustomerContentLabelsResponse, error)
}

type contentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentServiceClient(cc grpc.ClientConnInterface) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) AddToCustomerContent(ctx context.Context, in *AddToCustomerContentRequest, opts ...grpc.CallOption) (*AddToCustomerContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToCustomerContentResponse)
	err := c.cc.Invoke(ctx, ContentService_AddToCustomerContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetCustomerContent(ctx context.Context, in *GetCustomerContentRequest, opts ...grpc.CallOption) (*GetCustomerContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCustomerContentResponse)
	err := c.cc.Invoke(ctx, ContentService_GetCustomerContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteFromCustomerContent(ctx context.Context, in *DeleteFromCustomerContentRequest, opts ...grpc.CallOption) (*DeleteFromCustomerContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFromCustomerContentResponse)
	err := c.cc.Invoke(ctx, ContentService_DeleteFromCustomerContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) UpdateCustomerContents(ctx context.Context, in *UpdateCustomerContentsRequest, opts ...grpc.CallOption) (*UpdateCustomerContentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCustomerContentsResponse)
	err := c.cc.Invoke(ctx, ContentService_UpdateCustomerContents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ListCustomerContent(ctx context.Context, in *ListCustomerContentRequest, opts ...grpc.CallOption) (*ListCustomerContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCustomerContentResponse)
	err := c.cc.Invoke(ctx, ContentService_ListCustomerContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ListCustomerContentLabels(ctx context.Context, in *ListCustomerContentLabelsRequest, opts ...grpc.CallOption) (*ListCustomerContentLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCustomerContentLabelsResponse)
	err := c.cc.Invoke(ctx, ContentService_ListCustomerContentLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServiceServer is the server API for ContentService service.
// All implementations must embed UnimplementedContentServiceServer
// for forward compatibility
type ContentServiceServer interface {
	// Add content to customer content
	AddToCustomerContent(context.Context, *AddToCustomerContentRequest) (*AddToCustomerContentResponse, error)
	// Get customer content
	GetCustomerContent(context.Context, *GetCustomerContentRequest) (*GetCustomerContentResponse, error)
	// Delete content from customer content
	DeleteFromCustomerContent(context.Context, *DeleteFromCustomerContentRequest) (*DeleteFromCustomerContentResponse, error)
	// Update customer content
	UpdateCustomerContents(context.Context, *UpdateCustomerContentsRequest) (*UpdateCustomerContentsResponse, error)
	// List customer content
	ListCustomerContent(context.Context, *ListCustomerContentRequest) (*ListCustomerContentResponse, error)
	// List customer content labels
	ListCustomerContentLabels(context.Context, *ListCustomerContentLabelsRequest) (*ListCustomerContentLabelsResponse, error)
	mustEmbedUnimplementedContentServiceServer()
}

// UnimplementedContentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContentServiceServer struct {
}

func (UnimplementedContentServiceServer) AddToCustomerContent(context.Context, *AddToCustomerContentRequest) (*AddToCustomerContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToCustomerContent not implemented")
}
func (UnimplementedContentServiceServer) GetCustomerContent(context.Context, *GetCustomerContentRequest) (*GetCustomerContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerContent not implemented")
}
func (UnimplementedContentServiceServer) DeleteFromCustomerContent(context.Context, *DeleteFromCustomerContentRequest) (*DeleteFromCustomerContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromCustomerContent not implemented")
}
func (UnimplementedContentServiceServer) UpdateCustomerContents(context.Context, *UpdateCustomerContentsRequest) (*UpdateCustomerContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerContents not implemented")
}
func (UnimplementedContentServiceServer) ListCustomerContent(context.Context, *ListCustomerContentRequest) (*ListCustomerContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomerContent not implemented")
}
func (UnimplementedContentServiceServer) ListCustomerContentLabels(context.Context, *ListCustomerContentLabelsRequest) (*ListCustomerContentLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomerContentLabels not implemented")
}
func (UnimplementedContentServiceServer) mustEmbedUnimplementedContentServiceServer() {}

// UnsafeContentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServiceServer will
// result in compilation errors.
type UnsafeContentServiceServer interface {
	mustEmbedUnimplementedContentServiceServer()
}

func RegisterContentServiceServer(s grpc.ServiceRegistrar, srv ContentServiceServer) {
	s.RegisterService(&ContentService_ServiceDesc, srv)
}

func _ContentService_AddToCustomerContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToCustomerContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).AddToCustomerContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_AddToCustomerContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).AddToCustomerContent(ctx, req.(*AddToCustomerContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetCustomerContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetCustomerContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetCustomerContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetCustomerContent(ctx, req.(*GetCustomerContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteFromCustomerContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFromCustomerContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteFromCustomerContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DeleteFromCustomerContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteFromCustomerContent(ctx, req.(*DeleteFromCustomerContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_UpdateCustomerContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).UpdateCustomerContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_UpdateCustomerContents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).UpdateCustomerContents(ctx, req.(*UpdateCustomerContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ListCustomerContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCustomerContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ListCustomerContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_ListCustomerContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ListCustomerContent(ctx, req.(*ListCustomerContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ListCustomerContentLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCustomerContentLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ListCustomerContentLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_ListCustomerContentLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ListCustomerContentLabels(ctx, req.(*ListCustomerContentLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentService_ServiceDesc is the grpc.ServiceDesc for ContentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clavata.gateway.v1.ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToCustomerContent",
			Handler:    _ContentService_AddToCustomerContent_Handler,
		},
		{
			MethodName: "GetCustomerContent",
			Handler:    _ContentService_GetCustomerContent_Handler,
		},
		{
			MethodName: "DeleteFromCustomerContent",
			Handler:    _ContentService_DeleteFromCustomerContent_Handler,
		},
		{
			MethodName: "UpdateCustomerContents",
			Handler:    _ContentService_UpdateCustomerContents_Handler,
		},
		{
			MethodName: "ListCustomerContent",
			Handler:    _ContentService_ListCustomerContent_Handler,
		},
		{
			MethodName: "ListCustomerContentLabels",
			Handler:    _ContentService_ListCustomerContentLabels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clavata/gateway/v1/content.proto",
}
