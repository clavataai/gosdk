// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.3
// source: clavata/gateway/v1/gateway.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GatewayService_Evaluate_FullMethodName  = "/clavata.gateway.v1.GatewayService/Evaluate"
	GatewayService_CreateJob_FullMethodName = "/clavata.gateway.v1.GatewayService/CreateJob"
	GatewayService_GetJob_FullMethodName    = "/clavata.gateway.v1.GatewayService/GetJob"
	GatewayService_ListJobs_FullMethodName  = "/clavata.gateway.v1.GatewayService/ListJobs"
)

// GatewayServiceClient is the client API for GatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayServiceClient interface {
	// POST /v1/jobs/stream:
	// Send content to the Clavata API to be evaluated. The Evaluate endpoint is a server-side stream.
	// Each message sent over the stream will represent the result of evaluating one piece of content
	// against one policy.
	Evaluate(ctx context.Context, in *EvaluateRequest, opts ...grpc.CallOption) (GatewayService_EvaluateClient, error)
	// POST /v1/jobs:
	// CreateJob sends content to the Clavata API to be evaluated. The CreateJob endpoint can be used
	// in a synchronous or asynchronous manner. If the wait_for_completion flag is set to true, the
	// connection will stay open and wait for the job to complete/fail. If the flag is set to false,
	// the endpoint will return the JobID and the client can use the GetJob endpoint to check the status
	// of the job at a later time.
	CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*CreateJobResponse, error)
	// GET /v1/jobs/{job_uuid}:
	// Get a job, including its status, and any evaluation results (if the job is complete)
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error)
	// GET /v1/jobs:
	// List all jobs associated with your account. Filter jobs by time against their
	// creation, last update, or completion times. Or filter by job status.
	ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error)
}

type gatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayServiceClient(cc grpc.ClientConnInterface) GatewayServiceClient {
	return &gatewayServiceClient{cc}
}

func (c *gatewayServiceClient) Evaluate(ctx context.Context, in *EvaluateRequest, opts ...grpc.CallOption) (GatewayService_EvaluateClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GatewayService_ServiceDesc.Streams[0], GatewayService_Evaluate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayServiceEvaluateClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GatewayService_EvaluateClient interface {
	Recv() (*EvaluateResponse, error)
	grpc.ClientStream
}

type gatewayServiceEvaluateClient struct {
	grpc.ClientStream
}

func (x *gatewayServiceEvaluateClient) Recv() (*EvaluateResponse, error) {
	m := new(EvaluateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayServiceClient) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*CreateJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateJobResponse)
	err := c.cc.Invoke(ctx, GatewayService_CreateJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJobResponse)
	err := c.cc.Invoke(ctx, GatewayService_GetJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListJobsResponse)
	err := c.cc.Invoke(ctx, GatewayService_ListJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServiceServer is the server API for GatewayService service.
// All implementations must embed UnimplementedGatewayServiceServer
// for forward compatibility
type GatewayServiceServer interface {
	// POST /v1/jobs/stream:
	// Send content to the Clavata API to be evaluated. The Evaluate endpoint is a server-side stream.
	// Each message sent over the stream will represent the result of evaluating one piece of content
	// against one policy.
	Evaluate(*EvaluateRequest, GatewayService_EvaluateServer) error
	// POST /v1/jobs:
	// CreateJob sends content to the Clavata API to be evaluated. The CreateJob endpoint can be used
	// in a synchronous or asynchronous manner. If the wait_for_completion flag is set to true, the
	// connection will stay open and wait for the job to complete/fail. If the flag is set to false,
	// the endpoint will return the JobID and the client can use the GetJob endpoint to check the status
	// of the job at a later time.
	CreateJob(context.Context, *CreateJobRequest) (*CreateJobResponse, error)
	// GET /v1/jobs/{job_uuid}:
	// Get a job, including its status, and any evaluation results (if the job is complete)
	GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error)
	// GET /v1/jobs:
	// List all jobs associated with your account. Filter jobs by time against their
	// creation, last update, or completion times. Or filter by job status.
	ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error)
	mustEmbedUnimplementedGatewayServiceServer()
}

// UnimplementedGatewayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServiceServer struct {
}

func (UnimplementedGatewayServiceServer) Evaluate(*EvaluateRequest, GatewayService_EvaluateServer) error {
	return status.Errorf(codes.Unimplemented, "method Evaluate not implemented")
}
func (UnimplementedGatewayServiceServer) CreateJob(context.Context, *CreateJobRequest) (*CreateJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (UnimplementedGatewayServiceServer) GetJob(context.Context, *GetJobRequest) (*GetJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedGatewayServiceServer) ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (UnimplementedGatewayServiceServer) mustEmbedUnimplementedGatewayServiceServer() {}

// UnsafeGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServiceServer will
// result in compilation errors.
type UnsafeGatewayServiceServer interface {
	mustEmbedUnimplementedGatewayServiceServer()
}

func RegisterGatewayServiceServer(s grpc.ServiceRegistrar, srv GatewayServiceServer) {
	s.RegisterService(&GatewayService_ServiceDesc, srv)
}

func _GatewayService_Evaluate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EvaluateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServiceServer).Evaluate(m, &gatewayServiceEvaluateServer{ServerStream: stream})
}

type GatewayService_EvaluateServer interface {
	Send(*EvaluateResponse) error
	grpc.ServerStream
}

type gatewayServiceEvaluateServer struct {
	grpc.ServerStream
}

func (x *gatewayServiceEvaluateServer) Send(m *EvaluateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GatewayService_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_CreateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).CreateJob(ctx, req.(*CreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_GetJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayService_ListJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListJobs(ctx, req.(*ListJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayService_ServiceDesc is the grpc.ServiceDesc for GatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clavata.gateway.v1.GatewayService",
	HandlerType: (*GatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJob",
			Handler:    _GatewayService_CreateJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _GatewayService_GetJob_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _GatewayService_ListJobs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Evaluate",
			Handler:       _GatewayService_Evaluate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "clavata/gateway/v1/gateway.proto",
}
