// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.3
// source: clavata/gateway/v1/limits.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	LimitsService_GetCustomerReviewLimit_FullMethodName    = "/clavata.gateway.v1.LimitsService/GetCustomerReviewLimit"
	LimitsService_UpdateCustomerReviewLimit_FullMethodName = "/clavata.gateway.v1.LimitsService/UpdateCustomerReviewLimit"
	LimitsService_ListRateLimits_FullMethodName            = "/clavata.gateway.v1.LimitsService/ListRateLimits"
	LimitsService_GetCustomerRateLimits_FullMethodName     = "/clavata.gateway.v1.LimitsService/GetCustomerRateLimits"
	LimitsService_UpdateCustomerRateLimits_FullMethodName  = "/clavata.gateway.v1.LimitsService/UpdateCustomerRateLimits"
)

// LimitsServiceClient is the client API for LimitsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LimitsServiceClient interface {
	// Get the review limit for a customer
	GetCustomerReviewLimit(ctx context.Context, in *GetCustomerReviewLimitRequest, opts ...grpc.CallOption) (*GetCustomerReviewLimitResponse, error)
	// Update the review limit for a customer
	UpdateCustomerReviewLimit(ctx context.Context, in *UpdateCustomerReviewLimitRequest, opts ...grpc.CallOption) (*UpdateCustomerReviewLimitResponse, error)
	// List configurable rate limits
	ListRateLimits(ctx context.Context, in *ListRateLimitsRequest, opts ...grpc.CallOption) (*ListRateLimitsResponse, error)
	// Get the rate limits for a customer
	GetCustomerRateLimits(ctx context.Context, in *GetCustomerRateLimitsRequest, opts ...grpc.CallOption) (*GetCustomerRateLimitsResponse, error)
	// Update the rate limits for a customer
	UpdateCustomerRateLimits(ctx context.Context, in *UpdateCustomerRateLimitsRequest, opts ...grpc.CallOption) (*UpdateCustomerRateLimitsResponse, error)
}

type limitsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLimitsServiceClient(cc grpc.ClientConnInterface) LimitsServiceClient {
	return &limitsServiceClient{cc}
}

func (c *limitsServiceClient) GetCustomerReviewLimit(ctx context.Context, in *GetCustomerReviewLimitRequest, opts ...grpc.CallOption) (*GetCustomerReviewLimitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCustomerReviewLimitResponse)
	err := c.cc.Invoke(ctx, LimitsService_GetCustomerReviewLimit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitsServiceClient) UpdateCustomerReviewLimit(ctx context.Context, in *UpdateCustomerReviewLimitRequest, opts ...grpc.CallOption) (*UpdateCustomerReviewLimitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCustomerReviewLimitResponse)
	err := c.cc.Invoke(ctx, LimitsService_UpdateCustomerReviewLimit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitsServiceClient) ListRateLimits(ctx context.Context, in *ListRateLimitsRequest, opts ...grpc.CallOption) (*ListRateLimitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRateLimitsResponse)
	err := c.cc.Invoke(ctx, LimitsService_ListRateLimits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitsServiceClient) GetCustomerRateLimits(ctx context.Context, in *GetCustomerRateLimitsRequest, opts ...grpc.CallOption) (*GetCustomerRateLimitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCustomerRateLimitsResponse)
	err := c.cc.Invoke(ctx, LimitsService_GetCustomerRateLimits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitsServiceClient) UpdateCustomerRateLimits(ctx context.Context, in *UpdateCustomerRateLimitsRequest, opts ...grpc.CallOption) (*UpdateCustomerRateLimitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCustomerRateLimitsResponse)
	err := c.cc.Invoke(ctx, LimitsService_UpdateCustomerRateLimits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LimitsServiceServer is the server API for LimitsService service.
// All implementations must embed UnimplementedLimitsServiceServer
// for forward compatibility
type LimitsServiceServer interface {
	// Get the review limit for a customer
	GetCustomerReviewLimit(context.Context, *GetCustomerReviewLimitRequest) (*GetCustomerReviewLimitResponse, error)
	// Update the review limit for a customer
	UpdateCustomerReviewLimit(context.Context, *UpdateCustomerReviewLimitRequest) (*UpdateCustomerReviewLimitResponse, error)
	// List configurable rate limits
	ListRateLimits(context.Context, *ListRateLimitsRequest) (*ListRateLimitsResponse, error)
	// Get the rate limits for a customer
	GetCustomerRateLimits(context.Context, *GetCustomerRateLimitsRequest) (*GetCustomerRateLimitsResponse, error)
	// Update the rate limits for a customer
	UpdateCustomerRateLimits(context.Context, *UpdateCustomerRateLimitsRequest) (*UpdateCustomerRateLimitsResponse, error)
	mustEmbedUnimplementedLimitsServiceServer()
}

// UnimplementedLimitsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLimitsServiceServer struct {
}

func (UnimplementedLimitsServiceServer) GetCustomerReviewLimit(context.Context, *GetCustomerReviewLimitRequest) (*GetCustomerReviewLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerReviewLimit not implemented")
}
func (UnimplementedLimitsServiceServer) UpdateCustomerReviewLimit(context.Context, *UpdateCustomerReviewLimitRequest) (*UpdateCustomerReviewLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerReviewLimit not implemented")
}
func (UnimplementedLimitsServiceServer) ListRateLimits(context.Context, *ListRateLimitsRequest) (*ListRateLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRateLimits not implemented")
}
func (UnimplementedLimitsServiceServer) GetCustomerRateLimits(context.Context, *GetCustomerRateLimitsRequest) (*GetCustomerRateLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerRateLimits not implemented")
}
func (UnimplementedLimitsServiceServer) UpdateCustomerRateLimits(context.Context, *UpdateCustomerRateLimitsRequest) (*UpdateCustomerRateLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerRateLimits not implemented")
}
func (UnimplementedLimitsServiceServer) mustEmbedUnimplementedLimitsServiceServer() {}

// UnsafeLimitsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LimitsServiceServer will
// result in compilation errors.
type UnsafeLimitsServiceServer interface {
	mustEmbedUnimplementedLimitsServiceServer()
}

func RegisterLimitsServiceServer(s grpc.ServiceRegistrar, srv LimitsServiceServer) {
	s.RegisterService(&LimitsService_ServiceDesc, srv)
}

func _LimitsService_GetCustomerReviewLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerReviewLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitsServiceServer).GetCustomerReviewLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LimitsService_GetCustomerReviewLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitsServiceServer).GetCustomerReviewLimit(ctx, req.(*GetCustomerReviewLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LimitsService_UpdateCustomerReviewLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerReviewLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitsServiceServer).UpdateCustomerReviewLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LimitsService_UpdateCustomerReviewLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitsServiceServer).UpdateCustomerReviewLimit(ctx, req.(*UpdateCustomerReviewLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LimitsService_ListRateLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRateLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitsServiceServer).ListRateLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LimitsService_ListRateLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitsServiceServer).ListRateLimits(ctx, req.(*ListRateLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LimitsService_GetCustomerRateLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerRateLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitsServiceServer).GetCustomerRateLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LimitsService_GetCustomerRateLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitsServiceServer).GetCustomerRateLimits(ctx, req.(*GetCustomerRateLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LimitsService_UpdateCustomerRateLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerRateLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitsServiceServer).UpdateCustomerRateLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LimitsService_UpdateCustomerRateLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitsServiceServer).UpdateCustomerRateLimits(ctx, req.(*UpdateCustomerRateLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LimitsService_ServiceDesc is the grpc.ServiceDesc for LimitsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LimitsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clavata.gateway.v1.LimitsService",
	HandlerType: (*LimitsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCustomerReviewLimit",
			Handler:    _LimitsService_GetCustomerReviewLimit_Handler,
		},
		{
			MethodName: "UpdateCustomerReviewLimit",
			Handler:    _LimitsService_UpdateCustomerReviewLimit_Handler,
		},
		{
			MethodName: "ListRateLimits",
			Handler:    _LimitsService_ListRateLimits_Handler,
		},
		{
			MethodName: "GetCustomerRateLimits",
			Handler:    _LimitsService_GetCustomerRateLimits_Handler,
		},
		{
			MethodName: "UpdateCustomerRateLimits",
			Handler:    _LimitsService_UpdateCustomerRateLimits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clavata/gateway/v1/limits.proto",
}
