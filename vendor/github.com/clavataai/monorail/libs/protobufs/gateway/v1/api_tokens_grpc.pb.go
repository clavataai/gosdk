// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.3
// source: clavata/gateway/v1/api_tokens.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	APITokensService_GenerateAPIToken_FullMethodName     = "/clavata.gateway.v1.APITokensService/GenerateAPIToken"
	APITokensService_ListAllAPITokens_FullMethodName     = "/clavata.gateway.v1.APITokensService/ListAllAPITokens"
	APITokensService_UpdateAPITokenStatus_FullMethodName = "/clavata.gateway.v1.APITokensService/UpdateAPITokenStatus"
)

// APITokensServiceClient is the client API for APITokensService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APITokensServiceClient interface {
	// Used by Clavata Admins to create a long-lived API token for a customer (akin to a service account token)
	GenerateAPIToken(ctx context.Context, in *GenerateAPITokenRequest, opts ...grpc.CallOption) (*GenerateAPITokenResponse, error)
	// List ALL api tokens, across all customers. Indended for Clavata Admin use / Superadmin use only.
	ListAllAPITokens(ctx context.Context, in *ListAllAPITokensRequest, opts ...grpc.CallOption) (*ListAllAPITokensResponse, error)
	// Update the status of an API token
	UpdateAPITokenStatus(ctx context.Context, in *UpdateAPITokenStatusRequest, opts ...grpc.CallOption) (*UpdateAPITokenStatusResponse, error)
}

type aPITokensServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPITokensServiceClient(cc grpc.ClientConnInterface) APITokensServiceClient {
	return &aPITokensServiceClient{cc}
}

func (c *aPITokensServiceClient) GenerateAPIToken(ctx context.Context, in *GenerateAPITokenRequest, opts ...grpc.CallOption) (*GenerateAPITokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateAPITokenResponse)
	err := c.cc.Invoke(ctx, APITokensService_GenerateAPIToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPITokensServiceClient) ListAllAPITokens(ctx context.Context, in *ListAllAPITokensRequest, opts ...grpc.CallOption) (*ListAllAPITokensResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAllAPITokensResponse)
	err := c.cc.Invoke(ctx, APITokensService_ListAllAPITokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPITokensServiceClient) UpdateAPITokenStatus(ctx context.Context, in *UpdateAPITokenStatusRequest, opts ...grpc.CallOption) (*UpdateAPITokenStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAPITokenStatusResponse)
	err := c.cc.Invoke(ctx, APITokensService_UpdateAPITokenStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APITokensServiceServer is the server API for APITokensService service.
// All implementations must embed UnimplementedAPITokensServiceServer
// for forward compatibility
type APITokensServiceServer interface {
	// Used by Clavata Admins to create a long-lived API token for a customer (akin to a service account token)
	GenerateAPIToken(context.Context, *GenerateAPITokenRequest) (*GenerateAPITokenResponse, error)
	// List ALL api tokens, across all customers. Indended for Clavata Admin use / Superadmin use only.
	ListAllAPITokens(context.Context, *ListAllAPITokensRequest) (*ListAllAPITokensResponse, error)
	// Update the status of an API token
	UpdateAPITokenStatus(context.Context, *UpdateAPITokenStatusRequest) (*UpdateAPITokenStatusResponse, error)
	mustEmbedUnimplementedAPITokensServiceServer()
}

// UnimplementedAPITokensServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAPITokensServiceServer struct {
}

func (UnimplementedAPITokensServiceServer) GenerateAPIToken(context.Context, *GenerateAPITokenRequest) (*GenerateAPITokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAPIToken not implemented")
}
func (UnimplementedAPITokensServiceServer) ListAllAPITokens(context.Context, *ListAllAPITokensRequest) (*ListAllAPITokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllAPITokens not implemented")
}
func (UnimplementedAPITokensServiceServer) UpdateAPITokenStatus(context.Context, *UpdateAPITokenStatusRequest) (*UpdateAPITokenStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAPITokenStatus not implemented")
}
func (UnimplementedAPITokensServiceServer) mustEmbedUnimplementedAPITokensServiceServer() {}

// UnsafeAPITokensServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APITokensServiceServer will
// result in compilation errors.
type UnsafeAPITokensServiceServer interface {
	mustEmbedUnimplementedAPITokensServiceServer()
}

func RegisterAPITokensServiceServer(s grpc.ServiceRegistrar, srv APITokensServiceServer) {
	s.RegisterService(&APITokensService_ServiceDesc, srv)
}

func _APITokensService_GenerateAPIToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAPITokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APITokensServiceServer).GenerateAPIToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APITokensService_GenerateAPIToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APITokensServiceServer).GenerateAPIToken(ctx, req.(*GenerateAPITokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APITokensService_ListAllAPITokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllAPITokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APITokensServiceServer).ListAllAPITokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APITokensService_ListAllAPITokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APITokensServiceServer).ListAllAPITokens(ctx, req.(*ListAllAPITokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APITokensService_UpdateAPITokenStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAPITokenStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APITokensServiceServer).UpdateAPITokenStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APITokensService_UpdateAPITokenStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APITokensServiceServer).UpdateAPITokenStatus(ctx, req.(*UpdateAPITokenStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// APITokensService_ServiceDesc is the grpc.ServiceDesc for APITokensService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APITokensService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clavata.gateway.v1.APITokensService",
	HandlerType: (*APITokensServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateAPIToken",
			Handler:    _APITokensService_GenerateAPIToken_Handler,
		},
		{
			MethodName: "ListAllAPITokens",
			Handler:    _APITokensService_ListAllAPITokens_Handler,
		},
		{
			MethodName: "UpdateAPITokenStatus",
			Handler:    _APITokensService_UpdateAPITokenStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clavata/gateway/v1/api_tokens.proto",
}
