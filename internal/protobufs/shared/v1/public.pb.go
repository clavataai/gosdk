// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: clavata/shared/v1/public.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Evaluation outcome. TRUE, FALSE or FAILED.
type Outcome int32

const (
	Outcome_OUTCOME_UNSPECIFIED Outcome = 0
	Outcome_OUTCOME_FALSE       Outcome = 1
	Outcome_OUTCOME_TRUE        Outcome = 2
	Outcome_OUTCOME_FAILED      Outcome = 3
)

// Enum value maps for Outcome.
var (
	Outcome_name = map[int32]string{
		0: "OUTCOME_UNSPECIFIED",
		1: "OUTCOME_FALSE",
		2: "OUTCOME_TRUE",
		3: "OUTCOME_FAILED",
	}
	Outcome_value = map[string]int32{
		"OUTCOME_UNSPECIFIED": 0,
		"OUTCOME_FALSE":       1,
		"OUTCOME_TRUE":        2,
		"OUTCOME_FAILED":      3,
	}
)

func (x Outcome) Enum() *Outcome {
	p := new(Outcome)
	*p = x
	return p
}

func (x Outcome) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Outcome) Descriptor() protoreflect.EnumDescriptor {
	return file_clavata_shared_v1_public_proto_enumTypes[0].Descriptor()
}

func (Outcome) Type() protoreflect.EnumType {
	return &file_clavata_shared_v1_public_proto_enumTypes[0]
}

func (x Outcome) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Outcome.Descriptor instead.
func (Outcome) EnumDescriptor() ([]byte, []int) {
	return file_clavata_shared_v1_public_proto_rawDescGZIP(), []int{0}
}

// The status of a job at the time of the response
type JobStatus int32

const (
	JobStatus_JOB_STATUS_UNSPECIFIED JobStatus = 0
	JobStatus_JOB_STATUS_PENDING     JobStatus = 1
	JobStatus_JOB_STATUS_RUNNING     JobStatus = 2
	JobStatus_JOB_STATUS_COMPLETED   JobStatus = 3
	JobStatus_JOB_STATUS_FAILED      JobStatus = 4
	JobStatus_JOB_STATUS_CANCELED    JobStatus = 5
)

// Enum value maps for JobStatus.
var (
	JobStatus_name = map[int32]string{
		0: "JOB_STATUS_UNSPECIFIED",
		1: "JOB_STATUS_PENDING",
		2: "JOB_STATUS_RUNNING",
		3: "JOB_STATUS_COMPLETED",
		4: "JOB_STATUS_FAILED",
		5: "JOB_STATUS_CANCELED",
	}
	JobStatus_value = map[string]int32{
		"JOB_STATUS_UNSPECIFIED": 0,
		"JOB_STATUS_PENDING":     1,
		"JOB_STATUS_RUNNING":     2,
		"JOB_STATUS_COMPLETED":   3,
		"JOB_STATUS_FAILED":      4,
		"JOB_STATUS_CANCELED":    5,
	}
)

func (x JobStatus) Enum() *JobStatus {
	p := new(JobStatus)
	*p = x
	return p
}

func (x JobStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_clavata_shared_v1_public_proto_enumTypes[1].Descriptor()
}

func (JobStatus) Type() protoreflect.EnumType {
	return &file_clavata_shared_v1_public_proto_enumTypes[1]
}

func (x JobStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobStatus.Descriptor instead.
func (JobStatus) EnumDescriptor() ([]byte, []int) {
	return file_clavata_shared_v1_public_proto_rawDescGZIP(), []int{1}
}

// ContentData is a single piece of content to be processed by the Clavata.ai API. Each input should include
// a piece of text, or an image. When ContentData is included in responses, only the content_hash field will be
// included with the hash calculated by the server.
type ContentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Clavata calculated hash of the content.
	ContentHash string `protobuf:"bytes,1,opt,name=content_hash,json=contentHash,proto3" json:"content_hash,omitempty"`
	// The content to send to the server. Only one of these fields should be set.
	//
	// Types that are assignable to Content:
	//
	//	*ContentData_Text
	//	*ContentData_Image
	//	*ContentData_ImageUrl
	//	*ContentData_VideoUrl
	//	*ContentData_AudioUrl
	Content isContentData_Content `protobuf_oneof:"content"`
	// Label of the content. Used for evaluating policies. Optional
	Labels []string `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	// For images/files should contain the mime type saved as part of s3 and served so the client knows how to render the content.
	ContentType string `protobuf:"bytes,8,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// Optional metadata attached to content when sent to the server
	Metadata map[string]string `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Title for images/videos/audio files. Optional.
	// This is used to store the file name or alternate title in the customer contents database so that images and other files
	// can be identified by name, rather than just by their contents.
	Title *string `protobuf:"bytes,10,opt,name=title,proto3,oneof" json:"title,omitempty"`
}

func (x *ContentData) Reset() {
	*x = ContentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_shared_v1_public_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentData) ProtoMessage() {}

func (x *ContentData) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_shared_v1_public_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentData.ProtoReflect.Descriptor instead.
func (*ContentData) Descriptor() ([]byte, []int) {
	return file_clavata_shared_v1_public_proto_rawDescGZIP(), []int{0}
}

func (x *ContentData) GetContentHash() string {
	if x != nil {
		return x.ContentHash
	}
	return ""
}

func (m *ContentData) GetContent() isContentData_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *ContentData) GetText() string {
	if x, ok := x.GetContent().(*ContentData_Text); ok {
		return x.Text
	}
	return ""
}

func (x *ContentData) GetImage() []byte {
	if x, ok := x.GetContent().(*ContentData_Image); ok {
		return x.Image
	}
	return nil
}

func (x *ContentData) GetImageUrl() string {
	if x, ok := x.GetContent().(*ContentData_ImageUrl); ok {
		return x.ImageUrl
	}
	return ""
}

func (x *ContentData) GetVideoUrl() string {
	if x, ok := x.GetContent().(*ContentData_VideoUrl); ok {
		return x.VideoUrl
	}
	return ""
}

func (x *ContentData) GetAudioUrl() string {
	if x, ok := x.GetContent().(*ContentData_AudioUrl); ok {
		return x.AudioUrl
	}
	return ""
}

func (x *ContentData) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ContentData) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *ContentData) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ContentData) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type isContentData_Content interface {
	isContentData_Content()
}

type ContentData_Text struct {
	// A text string to process.
	Text string `protobuf:"bytes,2,opt,name=text,proto3,oneof"`
}

type ContentData_Image struct {
	// A binary image file to process.
	Image []byte `protobuf:"bytes,3,opt,name=image,proto3,oneof"`
}

type ContentData_ImageUrl struct {
	// A publicly-accessible URL that points to an image.
	ImageUrl string `protobuf:"bytes,4,opt,name=image_url,json=imageUrl,proto3,oneof"`
}

type ContentData_VideoUrl struct {
	// A publicly-accessible URL that points to a video.
	VideoUrl string `protobuf:"bytes,5,opt,name=video_url,json=videoUrl,proto3,oneof"`
}

type ContentData_AudioUrl struct {
	// A publicly-accessible URL that points to an audio file.
	AudioUrl string `protobuf:"bytes,6,opt,name=audio_url,json=audioUrl,proto3,oneof"`
}

func (*ContentData_Text) isContentData_Content() {}

func (*ContentData_Image) isContentData_Content() {}

func (*ContentData_ImageUrl) isContentData_Content() {}

func (*ContentData_VideoUrl) isContentData_Content() {}

func (*ContentData_AudioUrl) isContentData_Content() {}

// A range in the source code defined in terms of start and end line and column
type SourceRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The start location
	Start *SourceRange_SourceLocation `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// The end location
	End *SourceRange_SourceLocation `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *SourceRange) Reset() {
	*x = SourceRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_shared_v1_public_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceRange) ProtoMessage() {}

func (x *SourceRange) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_shared_v1_public_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceRange.ProtoReflect.Descriptor instead.
func (*SourceRange) Descriptor() ([]byte, []int) {
	return file_clavata_shared_v1_public_proto_rawDescGZIP(), []int{1}
}

func (x *SourceRange) GetStart() *SourceRange_SourceLocation {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *SourceRange) GetEnd() *SourceRange_SourceLocation {
	if x != nil {
		return x.End
	}
	return nil
}

// A report on the result of evaluating a policy against a piece of content/input.
type PolicyEvaluationReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId        string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	PolicyKey       string `protobuf:"bytes,2,opt,name=policy_key,json=policyKey,proto3" json:"policy_key,omitempty"`
	PolicyVersionId string `protobuf:"bytes,3,opt,name=policy_version_id,json=policyVersionId,proto3" json:"policy_version_id,omitempty"`
	// Deprecated: Marked as deprecated in clavata/shared/v1/public.proto.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Deprecated: Marked as deprecated in clavata/shared/v1/public.proto.
	Result Outcome `protobuf:"varint,5,opt,name=result,proto3,enum=clavata.shared.v1.Outcome" json:"result,omitempty"`
	// Reports on the evaluation of each SECTION or LABEL block in the policy.
	SectionEvaluationReports []*PolicyEvaluationReport_SectionEvaluationReport `protobuf:"bytes,6,rep,name=section_evaluation_reports,json=sectionEvaluationReports,proto3" json:"section_evaluation_reports,omitempty"`
	// Report on the evaluation of an EXCEPT WHEN or UNLESS block in a policy.
	ExceptionEvaluationReport *PolicyEvaluationReport_ExceptionEvaluationReport `protobuf:"bytes,7,opt,name=exception_evaluation_report,json=exceptionEvaluationReport,proto3" json:"exception_evaluation_report,omitempty"`
	// The unique FNV-1a hash of the content that was evaluated
	ContentHash string `protobuf:"bytes,8,opt,name=content_hash,json=contentHash,proto3" json:"content_hash,omitempty"`
	// If metadata was attached to the content when the job was created, it will be attached to the evaluation report here.
	ContentMetadata map[string]string `protobuf:"bytes,9,rep,name=content_metadata,json=contentMetadata,proto3" json:"content_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The review result
	ReviewResult *PolicyEvaluationReport_ReviewResult `protobuf:"bytes,10,opt,name=review_result,json=reviewResult,proto3" json:"review_result,omitempty"`
	// The threshold that was used to evaluate the policy
	Threshold float64 `protobuf:"fixed64,11,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *PolicyEvaluationReport) Reset() {
	*x = PolicyEvaluationReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_shared_v1_public_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyEvaluationReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyEvaluationReport) ProtoMessage() {}

func (x *PolicyEvaluationReport) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_shared_v1_public_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyEvaluationReport.ProtoReflect.Descriptor instead.
func (*PolicyEvaluationReport) Descriptor() ([]byte, []int) {
	return file_clavata_shared_v1_public_proto_rawDescGZIP(), []int{2}
}

func (x *PolicyEvaluationReport) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *PolicyEvaluationReport) GetPolicyKey() string {
	if x != nil {
		return x.PolicyKey
	}
	return ""
}

func (x *PolicyEvaluationReport) GetPolicyVersionId() string {
	if x != nil {
		return x.PolicyVersionId
	}
	return ""
}

// Deprecated: Marked as deprecated in clavata/shared/v1/public.proto.
func (x *PolicyEvaluationReport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Deprecated: Marked as deprecated in clavata/shared/v1/public.proto.
func (x *PolicyEvaluationReport) GetResult() Outcome {
	if x != nil {
		return x.Result
	}
	return Outcome_OUTCOME_UNSPECIFIED
}

func (x *PolicyEvaluationReport) GetSectionEvaluationReports() []*PolicyEvaluationReport_SectionEvaluationReport {
	if x != nil {
		return x.SectionEvaluationReports
	}
	return nil
}

func (x *PolicyEvaluationReport) GetExceptionEvaluationReport() *PolicyEvaluationReport_ExceptionEvaluationReport {
	if x != nil {
		return x.ExceptionEvaluationReport
	}
	return nil
}

func (x *PolicyEvaluationReport) GetContentHash() string {
	if x != nil {
		return x.ContentHash
	}
	return ""
}

func (x *PolicyEvaluationReport) GetContentMetadata() map[string]string {
	if x != nil {
		return x.ContentMetadata
	}
	return nil
}

func (x *PolicyEvaluationReport) GetReviewResult() *PolicyEvaluationReport_ReviewResult {
	if x != nil {
		return x.ReviewResult
	}
	return nil
}

func (x *PolicyEvaluationReport) GetThreshold() float64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

// TimeRange is a range of time. Used to filter results based on a start and end time.
type TimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The start of the time range
	Start *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// The end of the time range
	End *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	// Whether to treat the time range as inclusive or exclusive
	Inclusive bool `protobuf:"varint,3,opt,name=inclusive,proto3" json:"inclusive,omitempty"`
}

func (x *TimeRange) Reset() {
	*x = TimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_shared_v1_public_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRange) ProtoMessage() {}

func (x *TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_shared_v1_public_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRange.ProtoReflect.Descriptor instead.
func (*TimeRange) Descriptor() ([]byte, []int) {
	return file_clavata_shared_v1_public_proto_rawDescGZIP(), []int{3}
}

func (x *TimeRange) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *TimeRange) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *TimeRange) GetInclusive() bool {
	if x != nil {
		return x.Inclusive
	}
	return false
}

type JobResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the result
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The ID of the related Job
	JobUuid string `protobuf:"bytes,2,opt,name=job_uuid,json=jobUuid,proto3" json:"job_uuid,omitempty"`
	// The hash of the content that was evaluated. Deprecated as the report includes the hash.
	ContentHash string `protobuf:"bytes,3,opt,name=content_hash,json=contentHash,proto3" json:"content_hash,omitempty"`
	// The evaluation report for this result.
	Report *PolicyEvaluationReport `protobuf:"bytes,4,opt,name=report,proto3" json:"report,omitempty"`
	// The time the result was created
	Created *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *JobResult) Reset() {
	*x = JobResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_shared_v1_public_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobResult) ProtoMessage() {}

func (x *JobResult) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_shared_v1_public_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobResult.ProtoReflect.Descriptor instead.
func (*JobResult) Descriptor() ([]byte, []int) {
	return file_clavata_shared_v1_public_proto_rawDescGZIP(), []int{4}
}

func (x *JobResult) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *JobResult) GetJobUuid() string {
	if x != nil {
		return x.JobUuid
	}
	return ""
}

func (x *JobResult) GetContentHash() string {
	if x != nil {
		return x.ContentHash
	}
	return ""
}

func (x *JobResult) GetReport() *PolicyEvaluationReport {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *JobResult) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

// A unique evaluation job that has compared one or more policies to one or more pieces of content
type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the job
	JobUuid string `protobuf:"bytes,1,opt,name=job_uuid,json=jobUuid,proto3" json:"job_uuid,omitempty"`
	// The customer ID
	CustomerId string `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// The status of the job
	Status JobStatus `protobuf:"varint,3,opt,name=status,proto3,enum=clavata.shared.v1.JobStatus" json:"status,omitempty"`
	// Metadata for this job. INTERNAL only.
	Metadata *Job_Metadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Content associated with this job. This field is input only and will not be included in responses.
	ContentData []*ContentData `protobuf:"bytes,5,rep,name=content_data,json=contentData,proto3" json:"content_data,omitempty"`
	// The results of the policy evaluations
	Results []*JobResult `protobuf:"bytes,6,rep,name=results,proto3" json:"results,omitempty"`
	// The time the job was created
	Created *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	// The time the job was updated
	Updated *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated,proto3" json:"updated,omitempty"`
	// The time the job was completed
	Completed *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=completed,proto3" json:"completed,omitempty"`
	// Policy ID to evaluate this job
	PolicyId *string `protobuf:"bytes,10,opt,name=policy_id,json=policyId,proto3,oneof" json:"policy_id,omitempty"`
	// Policy Version ID to evaluate this job
	PolicyVersionId *string `protobuf:"bytes,11,opt,name=policy_version_id,json=policyVersionId,proto3,oneof" json:"policy_version_id,omitempty"`
	// The ID of the policy draft used to evaluate this job. Internal only, used by our clients
	// when running tests on drafts of policies.
	PolicyDraftId *string `protobuf:"bytes,12,opt,name=policy_draft_id,json=policyDraftId,proto3,oneof" json:"policy_draft_id,omitempty"`
	// The threshold that was set for this job
	Threshold float64 `protobuf:"fixed64,13,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_shared_v1_public_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_shared_v1_public_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_clavata_shared_v1_public_proto_rawDescGZIP(), []int{5}
}

func (x *Job) GetJobUuid() string {
	if x != nil {
		return x.JobUuid
	}
	return ""
}

func (x *Job) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *Job) GetStatus() JobStatus {
	if x != nil {
		return x.Status
	}
	return JobStatus_JOB_STATUS_UNSPECIFIED
}

func (x *Job) GetMetadata() *Job_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Job) GetContentData() []*ContentData {
	if x != nil {
		return x.ContentData
	}
	return nil
}

func (x *Job) GetResults() []*JobResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *Job) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Job) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *Job) GetCompleted() *timestamppb.Timestamp {
	if x != nil {
		return x.Completed
	}
	return nil
}

func (x *Job) GetPolicyId() string {
	if x != nil && x.PolicyId != nil {
		return *x.PolicyId
	}
	return ""
}

func (x *Job) GetPolicyVersionId() string {
	if x != nil && x.PolicyVersionId != nil {
		return *x.PolicyVersionId
	}
	return ""
}

func (x *Job) GetPolicyDraftId() string {
	if x != nil && x.PolicyDraftId != nil {
		return *x.PolicyDraftId
	}
	return ""
}

func (x *Job) GetThreshold() float64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

// A location in the source code defined in terms of line and column
type SourceRange_SourceLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The line number
	Line int32 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	// The column number
	Column int32 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *SourceRange_SourceLocation) Reset() {
	*x = SourceRange_SourceLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_shared_v1_public_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceRange_SourceLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceRange_SourceLocation) ProtoMessage() {}

func (x *SourceRange_SourceLocation) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_shared_v1_public_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceRange_SourceLocation.ProtoReflect.Descriptor instead.
func (*SourceRange_SourceLocation) Descriptor() ([]byte, []int) {
	return file_clavata_shared_v1_public_proto_rawDescGZIP(), []int{1, 0}
}

func (x *SourceRange_SourceLocation) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *SourceRange_SourceLocation) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

// Report on the result of a single assertion in a policy.
type PolicyEvaluationReport_ReviewResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outcome Outcome `protobuf:"varint,1,opt,name=outcome,proto3,enum=clavata.shared.v1.Outcome" json:"outcome,omitempty"`
	Score   float64 `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *PolicyEvaluationReport_ReviewResult) Reset() {
	*x = PolicyEvaluationReport_ReviewResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_shared_v1_public_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyEvaluationReport_ReviewResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyEvaluationReport_ReviewResult) ProtoMessage() {}

func (x *PolicyEvaluationReport_ReviewResult) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_shared_v1_public_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyEvaluationReport_ReviewResult.ProtoReflect.Descriptor instead.
func (*PolicyEvaluationReport_ReviewResult) Descriptor() ([]byte, []int) {
	return file_clavata_shared_v1_public_proto_rawDescGZIP(), []int{2, 0}
}

func (x *PolicyEvaluationReport_ReviewResult) GetOutcome() Outcome {
	if x != nil {
		return x.Outcome
	}
	return Outcome_OUTCOME_UNSPECIFIED
}

func (x *PolicyEvaluationReport_ReviewResult) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

type PolicyEvaluationReport_AssertionEvaluationReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in clavata/shared/v1/public.proto.
	Result Outcome `protobuf:"varint,1,opt,name=result,proto3,enum=clavata.shared.v1.Outcome" json:"result,omitempty"`
	// The text of the assertion.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The source range of the assertion
	SourceRange *SourceRange `protobuf:"bytes,3,opt,name=source_range,json=sourceRange,proto3,oneof" json:"source_range,omitempty"`
	// The truthiness of the assertion
	Score float64 `protobuf:"fixed64,4,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *PolicyEvaluationReport_AssertionEvaluationReport) Reset() {
	*x = PolicyEvaluationReport_AssertionEvaluationReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_shared_v1_public_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyEvaluationReport_AssertionEvaluationReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyEvaluationReport_AssertionEvaluationReport) ProtoMessage() {}

func (x *PolicyEvaluationReport_AssertionEvaluationReport) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_shared_v1_public_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyEvaluationReport_AssertionEvaluationReport.ProtoReflect.Descriptor instead.
func (*PolicyEvaluationReport_AssertionEvaluationReport) Descriptor() ([]byte, []int) {
	return file_clavata_shared_v1_public_proto_rawDescGZIP(), []int{2, 1}
}

// Deprecated: Marked as deprecated in clavata/shared/v1/public.proto.
func (x *PolicyEvaluationReport_AssertionEvaluationReport) GetResult() Outcome {
	if x != nil {
		return x.Result
	}
	return Outcome_OUTCOME_UNSPECIFIED
}

func (x *PolicyEvaluationReport_AssertionEvaluationReport) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PolicyEvaluationReport_AssertionEvaluationReport) GetSourceRange() *SourceRange {
	if x != nil {
		return x.SourceRange
	}
	return nil
}

func (x *PolicyEvaluationReport_AssertionEvaluationReport) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

// A report on evaluation of an EXCEPT WHEN or UNLESS block in a policy.
type PolicyEvaluationReport_ExceptionEvaluationReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The outcome of the exception evaluation
	//
	// Deprecated: Marked as deprecated in clavata/shared/v1/public.proto.
	Result                     Outcome                                             `protobuf:"varint,1,opt,name=result,proto3,enum=clavata.shared.v1.Outcome" json:"result,omitempty"`
	AssertionEvaluationReports []*PolicyEvaluationReport_AssertionEvaluationReport `protobuf:"bytes,2,rep,name=assertion_evaluation_reports,json=assertionEvaluationReports,proto3" json:"assertion_evaluation_reports,omitempty"`
	// The source range of the exception
	SourceRange *SourceRange `protobuf:"bytes,3,opt,name=source_range,json=sourceRange,proto3,oneof" json:"source_range,omitempty"`
	// The review result for the exception
	ReviewResult *PolicyEvaluationReport_ReviewResult `protobuf:"bytes,4,opt,name=review_result,json=reviewResult,proto3" json:"review_result,omitempty"`
}

func (x *PolicyEvaluationReport_ExceptionEvaluationReport) Reset() {
	*x = PolicyEvaluationReport_ExceptionEvaluationReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_shared_v1_public_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyEvaluationReport_ExceptionEvaluationReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyEvaluationReport_ExceptionEvaluationReport) ProtoMessage() {}

func (x *PolicyEvaluationReport_ExceptionEvaluationReport) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_shared_v1_public_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyEvaluationReport_ExceptionEvaluationReport.ProtoReflect.Descriptor instead.
func (*PolicyEvaluationReport_ExceptionEvaluationReport) Descriptor() ([]byte, []int) {
	return file_clavata_shared_v1_public_proto_rawDescGZIP(), []int{2, 2}
}

// Deprecated: Marked as deprecated in clavata/shared/v1/public.proto.
func (x *PolicyEvaluationReport_ExceptionEvaluationReport) GetResult() Outcome {
	if x != nil {
		return x.Result
	}
	return Outcome_OUTCOME_UNSPECIFIED
}

func (x *PolicyEvaluationReport_ExceptionEvaluationReport) GetAssertionEvaluationReports() []*PolicyEvaluationReport_AssertionEvaluationReport {
	if x != nil {
		return x.AssertionEvaluationReports
	}
	return nil
}

func (x *PolicyEvaluationReport_ExceptionEvaluationReport) GetSourceRange() *SourceRange {
	if x != nil {
		return x.SourceRange
	}
	return nil
}

func (x *PolicyEvaluationReport_ExceptionEvaluationReport) GetReviewResult() *PolicyEvaluationReport_ReviewResult {
	if x != nil {
		return x.ReviewResult
	}
	return nil
}

// Report on the evaluation of a SECTION or LABEL in a policy.
type PolicyEvaluationReport_SectionEvaluationReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Deprecated: Marked as deprecated in clavata/shared/v1/public.proto.
	Result                     Outcome                                             `protobuf:"varint,2,opt,name=result,proto3,enum=clavata.shared.v1.Outcome" json:"result,omitempty"`
	Message                    string                                              `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	AssertionEvaluationReports []*PolicyEvaluationReport_AssertionEvaluationReport `protobuf:"bytes,4,rep,name=assertion_evaluation_reports,json=assertionEvaluationReports,proto3" json:"assertion_evaluation_reports,omitempty"`
	ExceptionEvaluationReport  *PolicyEvaluationReport_ExceptionEvaluationReport   `protobuf:"bytes,5,opt,name=exception_evaluation_report,json=exceptionEvaluationReport,proto3" json:"exception_evaluation_report,omitempty"`
	// The source range of the section
	SourceRange *SourceRange `protobuf:"bytes,6,opt,name=source_range,json=sourceRange,proto3,oneof" json:"source_range,omitempty"`
	// The review result
	ReviewResult *PolicyEvaluationReport_ReviewResult `protobuf:"bytes,7,opt,name=review_result,json=reviewResult,proto3" json:"review_result,omitempty"`
}

func (x *PolicyEvaluationReport_SectionEvaluationReport) Reset() {
	*x = PolicyEvaluationReport_SectionEvaluationReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_shared_v1_public_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyEvaluationReport_SectionEvaluationReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyEvaluationReport_SectionEvaluationReport) ProtoMessage() {}

func (x *PolicyEvaluationReport_SectionEvaluationReport) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_shared_v1_public_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyEvaluationReport_SectionEvaluationReport.ProtoReflect.Descriptor instead.
func (*PolicyEvaluationReport_SectionEvaluationReport) Descriptor() ([]byte, []int) {
	return file_clavata_shared_v1_public_proto_rawDescGZIP(), []int{2, 3}
}

func (x *PolicyEvaluationReport_SectionEvaluationReport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Deprecated: Marked as deprecated in clavata/shared/v1/public.proto.
func (x *PolicyEvaluationReport_SectionEvaluationReport) GetResult() Outcome {
	if x != nil {
		return x.Result
	}
	return Outcome_OUTCOME_UNSPECIFIED
}

func (x *PolicyEvaluationReport_SectionEvaluationReport) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PolicyEvaluationReport_SectionEvaluationReport) GetAssertionEvaluationReports() []*PolicyEvaluationReport_AssertionEvaluationReport {
	if x != nil {
		return x.AssertionEvaluationReports
	}
	return nil
}

func (x *PolicyEvaluationReport_SectionEvaluationReport) GetExceptionEvaluationReport() *PolicyEvaluationReport_ExceptionEvaluationReport {
	if x != nil {
		return x.ExceptionEvaluationReport
	}
	return nil
}

func (x *PolicyEvaluationReport_SectionEvaluationReport) GetSourceRange() *SourceRange {
	if x != nil {
		return x.SourceRange
	}
	return nil
}

func (x *PolicyEvaluationReport_SectionEvaluationReport) GetReviewResult() *PolicyEvaluationReport_ReviewResult {
	if x != nil {
		return x.ReviewResult
	}
	return nil
}

type Job_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Customer ID
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Threshold for the job
	Threshold float64 `protobuf:"fixed64,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *Job_Metadata) Reset() {
	*x = Job_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_shared_v1_public_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job_Metadata) ProtoMessage() {}

func (x *Job_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_shared_v1_public_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job_Metadata.ProtoReflect.Descriptor instead.
func (*Job_Metadata) Descriptor() ([]byte, []int) {
	return file_clavata_shared_v1_public_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Job_Metadata) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *Job_Metadata) GetThreshold() float64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

var File_clavata_shared_v1_public_proto protoreflect.FileDescriptor

var file_clavata_shared_v1_public_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x09,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0xbd, 0x01,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x99, 0x01, 0x92, 0x41, 0x92, 0x01, 0x2a, 0x27, 0x43, 0x6c, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20,
	0x68, 0x61, 0x73, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x32, 0x67, 0x54, 0x68, 0x65, 0x20, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x20, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x20, 0x75, 0x73, 0x65, 0x64,
	0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x20, 0x61, 0x74, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x68, 0x61, 0x73, 0x68, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x28, 0x69, 0x2e, 0x65, 0x2e, 0x2c,
	0x20, 0x27, 0x6d, 0x64, 0x35, 0x3a, 0x3a, 0x68, 0x61, 0x73, 0x68, 0x27, 0x29, 0xe0, 0x41, 0x03,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x4e, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92, 0x41, 0x32,
	0x2a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, 0x32, 0x24, 0x49, 0x4e,
	0x50, 0x55, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x2c, 0x41, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x2e, 0xe0, 0x41, 0x04, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x60, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x48, 0x92, 0x41,
	0x42, 0x2a, 0x0b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x2a,
	0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x2c, 0x41, 0x20, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x74,
	0x6f, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2e, 0xa2, 0x02, 0x06, 0x62, 0x61, 0x73,
	0x65, 0x36, 0x34, 0xe0, 0x41, 0x04, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x84, 0x01, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x65, 0x92, 0x41, 0x50, 0x2a, 0x0f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x20,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x20, 0x55, 0x52, 0x4c, 0x32, 0x3d, 0x49, 0x4e, 0x50, 0x55, 0x54,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x2c, 0x41, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6c, 0x79,
	0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x55, 0x52, 0x4c, 0x20,
	0x74, 0x68, 0x61, 0x74, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x61,
	0x6e, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0xe0, 0x41, 0x04, 0xfa, 0xd2, 0xe4, 0x93, 0x02,
	0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x83, 0x01, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x64, 0x92, 0x41, 0x4f, 0x2a,
	0x0f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x20, 0x55, 0x52, 0x4c,
	0x32, 0x3c, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x2c, 0x41, 0x20, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x6c, 0x79, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x20, 0x55, 0x52, 0x4c, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0xe0, 0x41,
	0x04, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57,
	0x48, 0x00, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x89, 0x01, 0x0a,
	0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x6a, 0x92, 0x41, 0x55, 0x2a, 0x0f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x20, 0x55, 0x52, 0x4c, 0x32, 0x42, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x2c, 0x41, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6c, 0x79, 0x2d, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x20, 0x55, 0x52, 0x4c, 0x20, 0x74, 0x68, 0x61,
	0x74, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6e, 0x20, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0xe0, 0x41, 0x04, 0xfa, 0xd2, 0xe4,
	0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x48, 0x00, 0x52, 0x08,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x10, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0a,
	0x12, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x33, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0a,
	0x12, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6c, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0f, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49, 0x45,
	0x57, 0x48, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x55, 0x92, 0x41, 0x52, 0x0a,
	0x50, 0x2a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x44, 0x61, 0x74, 0x61, 0x32,
	0x40, 0x41, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x70, 0x69, 0x65, 0x63, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65,
	0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x43, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x61, 0x69, 0x20, 0x41, 0x50, 0x49,
	0x2e, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x0b, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3f, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x1a, 0x3c, 0x0a, 0x0e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x80, 0x1b, 0x0a, 0x16, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x45, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0x92, 0x41, 0x1d, 0x2a, 0x12, 0x54,
	0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0xa2, 0x02, 0x06, 0x75, 0x75, 0x69, 0x64, 0x76, 0x34, 0xe2, 0x8c, 0xcf, 0xd7, 0x08, 0x02,
	0x08, 0x01, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0xd3, 0x01, 0x0a,
	0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0xb3, 0x01, 0x92, 0x41, 0xaf, 0x01, 0x2a, 0x26, 0x54, 0x68, 0x65, 0x20, 0x68, 0x75,
	0x6d, 0x61, 0x6e, 0x2d, 0x72, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x32, 0x84, 0x01, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x20, 0x61, 0x73, 0x20, 0x69, 0x74, 0x20, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x73,
	0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x65,
	0x64, 0x69, 0x74, 0x6f, 0x72, 0x2e, 0x20, 0x44, 0x6f, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x75, 0x73,
	0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x79, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x20, 0x55, 0x73, 0x65,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x20, 0x69,
	0x6e, 0x73, 0x74, 0x65, 0x61, 0x64, 0x2e, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4b,
	0x65, 0x79, 0x12, 0x5c, 0x0a, 0x11, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x92,
	0x41, 0x25, 0x2a, 0x1a, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0xa2, 0x02,
	0x06, 0x75, 0x75, 0x69, 0x64, 0x76, 0x34, 0xe2, 0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x01, 0x52,
	0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12,
	0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x18, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xe6, 0x01, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x42, 0xb1, 0x01, 0x92, 0x41, 0xab, 0x01, 0x2a, 0x0f, 0x4f, 0x76,
	0x65, 0x72, 0x61, 0x6c, 0x6c, 0x20, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x32, 0x97, 0x01,
	0x41, 0x6e, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x20, 0x31, 0x20, 0x70, 0x69, 0x65,
	0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x20, 0x49,
	0x66, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x65, 0x76, 0x61, 0x6c,
	0x27, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x69,
	0x73, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2e, 0x18, 0x01, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0xe7, 0x01, 0x0a, 0x1a, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x66, 0x92, 0x41, 0x63, 0x2a, 0x18,
	0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x20, 0x6f, 0x72, 0x20, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x32, 0x47, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x53, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x20, 0x6f, 0x72, 0x20, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x20, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x52, 0x18, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0xf0, 0x01, 0x0a, 0x1b,
	0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x6b, 0x92, 0x41, 0x68, 0x2a, 0x1c, 0x45, 0x58, 0x43,
	0x45, 0x50, 0x54, 0x20, 0x57, 0x48, 0x45, 0x4e, 0x20, 0x6f, 0x72, 0x20, 0x55, 0x4e, 0x4c, 0x45,
	0x53, 0x53, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x32, 0x48, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x45, 0x58, 0x43, 0x45, 0x50,
	0x54, 0x20, 0x57, 0x48, 0x45, 0x4e, 0x20, 0x6f, 0x72, 0x20, 0x55, 0x4e, 0x4c, 0x45, 0x53, 0x53,
	0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x52, 0x19, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0xb7,
	0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x93, 0x01, 0x92, 0x41, 0x8f, 0x01, 0x2a, 0x19, 0x48, 0x61,
	0x73, 0x68, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x32, 0x72, 0x54, 0x68, 0x65, 0x20, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x20, 0x75,
	0x73, 0x65, 0x64, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x20,
	0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x68, 0x61, 0x73, 0x68, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69,
	0x6e, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x28, 0x69, 0x2e,
	0x65, 0x2e, 0x2c, 0x20, 0x27, 0x66, 0x6e, 0x76, 0x31, 0x61, 0x31, 0x32, 0x38, 0x3a, 0x3a, 0x68,
	0x61, 0x73, 0x68, 0x2d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x27, 0x29, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x69, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x5b, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6c, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0x5a,
	0x0a, 0x0c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x34,
	0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0xee, 0x01, 0x0a, 0x19, 0x41,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x0c, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x42, 0x10, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0xc9, 0x04, 0x0a, 0x19,
	0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0xce, 0x01, 0x0a, 0x1c, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x47, 0x92,
	0x41, 0x44, 0x2a, 0x14, 0x50, 0x65, 0x72, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x32, 0x2c, 0x45, 0x61, 0x63, 0x68, 0x20, 0x61,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x52, 0x1a, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x58, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x10, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0a,
	0x12, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x0d,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3a, 0x5b, 0x92, 0x41, 0x58, 0x0a, 0x56,
	0x2a, 0x1c, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x20, 0x57, 0x48, 0x45, 0x4e, 0x20, 0x6f, 0x72,
	0x20, 0x55, 0x4e, 0x4c, 0x45, 0x53, 0x53, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x32, 0x36,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x45, 0x58,
	0x43, 0x45, 0x50, 0x54, 0x20, 0x57, 0x48, 0x45, 0x4e, 0x20, 0x6f, 0x72, 0x20, 0x55, 0x4e, 0x4c,
	0x45, 0x53, 0x53, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2c, 0x20, 0x69, 0x66, 0x20, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x8d, 0x06, 0x0a, 0x17, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0xcd, 0x01, 0x0a, 0x1c, 0x61, 0x73,
	0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x46, 0x92, 0x41, 0x43, 0x2a, 0x14, 0x50, 0x65, 0x72, 0x2d,
	0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x32, 0x2b, 0x45, 0x61, 0x63, 0x68, 0x20, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x69, 0x6e, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x69, 0x73, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x52, 0x1a, 0x61,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0xf3, 0x01, 0x0a, 0x1b, 0x65, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x42, 0x6e, 0x92, 0x41, 0x6b, 0x2a, 0x1c, 0x45, 0x58, 0x43, 0x45, 0x50,
	0x54, 0x20, 0x57, 0x48, 0x45, 0x4e, 0x20, 0x6f, 0x72, 0x20, 0x55, 0x4e, 0x4c, 0x45, 0x53, 0x53,
	0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x32, 0x4b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x20,
	0x57, 0x48, 0x45, 0x4e, 0x20, 0x6f, 0x72, 0x20, 0x55, 0x4e, 0x4c, 0x45, 0x53, 0x53, 0x20, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x19, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x58, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x10, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x0d, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x42, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x70, 0x92, 0x41, 0x6d,
	0x0a, 0x6b, 0x2a, 0x18, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x32, 0x4f, 0x41, 0x20,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x61, 0x67, 0x61, 0x69,
	0x6e, 0x73, 0x74, 0x20, 0x61, 0x20, 0x70, 0x69, 0x65, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x22, 0xe4, 0x01,
	0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a,
	0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x3a, 0x59, 0x92, 0x41, 0x56, 0x0a, 0x54,
	0x2a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x32, 0x46, 0x41, 0x20,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x20, 0x55,
	0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x20, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x61,
	0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x22, 0xe2, 0x04, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0xe2, 0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x42, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x27, 0x92, 0x41, 0x1c, 0x2a, 0x11, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6a, 0x6f, 0x62, 0xa2, 0x02, 0x06, 0x75, 0x75, 0x69,
	0x64, 0x76, 0x34, 0xe2, 0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x01, 0x52, 0x07, 0x6a, 0x6f, 0x62,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xfa, 0xd2, 0xe4, 0x93,
	0x02, 0x0a, 0x12, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x82, 0x02, 0x0a, 0x06, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0xbe, 0x01, 0x92, 0x41, 0xba, 0x01, 0x2a, 0x26, 0x54, 0x68,
	0x65, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x32, 0x8f, 0x01, 0x54, 0x68, 0x65, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x20, 0x54, 0x68,
	0x69, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x61, 0x73, 0x20, 0x77, 0x65,
	0x6c, 0x6c, 0x20, 0x61, 0x73, 0x20, 0x73, 0x75, 0x62, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x6d,
	0x6f, 0x72, 0x65, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x69, 0x66, 0x20, 0x6e,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x2e, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x34,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x3a, 0x73, 0x92, 0x41, 0x70, 0x0a, 0x6e, 0x2a, 0x0a, 0x4a, 0x6f, 0x62,
	0x20, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x60, 0x41, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x6a, 0x6f, 0x62, 0x2e, 0x20, 0x45, 0x61, 0x63, 0x68, 0x20, 0x70, 0x69, 0x65,
	0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x68,
	0x61, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x22, 0xe2, 0x0a, 0x0a, 0x03, 0x4a, 0x6f,
	0x62, 0x12, 0x45, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x1c, 0x2a, 0x11, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6a, 0x6f, 0x62, 0xa2, 0x02, 0x06, 0x75, 0x75,
	0x69, 0x64, 0x76, 0x34, 0xe0, 0x41, 0x03, 0xe2, 0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x01, 0x52,
	0x07, 0x6a, 0x6f, 0x62, 0x55, 0x75, 0x69, 0x64, 0x12, 0x59, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x92,
	0x41, 0x32, 0x2a, 0x27, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6a, 0x6f, 0x62, 0xa2, 0x02, 0x06, 0x75, 0x75,
	0x69, 0x64, 0x76, 0x34, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x7b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x45, 0x92, 0x41, 0x3f, 0x2a, 0x0a, 0x4a, 0x6f, 0x62, 0x20, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x32, 0x31, 0x54, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6a, 0x6f, 0x62, 0x20, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x4d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x42, 0x10, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0xd9, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x95, 0x01, 0x92, 0x41, 0x8e, 0x01, 0x2a, 0x22, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x44, 0x61, 0x74, 0x61, 0x20, 0x74, 0x6f, 0x20, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6a, 0x6f,
	0x62, 0x32, 0x68, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x2c, 0x57, 0x69,
	0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x20, 0x66,
	0x72, 0x6f, 0x6d, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x20, 0x61, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x68, 0x61, 0x73, 0x68,
	0x20, 0x69, 0x66, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x2e, 0xe0, 0x41, 0x04, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3d,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x4a, 0x0a,
	0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x28, 0x92, 0x41, 0x1d, 0x2a, 0x12, 0x54, 0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66,
	0x20, 0x61, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0xa2, 0x02, 0x06, 0x75, 0x75, 0x69, 0x64,
	0x76, 0x34, 0xe2, 0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x01, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x11, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x25, 0x2a, 0x1a, 0x54, 0x68, 0x65, 0x20, 0x49,
	0x44, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0xa2, 0x02, 0x06, 0x75, 0x75, 0x69, 0x64, 0x76, 0x34, 0xe0, 0x41,
	0x03, 0xe2, 0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x01, 0x48, 0x01, 0x52, 0x0f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x6b, 0x0a, 0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3e, 0x92, 0x41, 0x23, 0x2a, 0x18, 0x54,
	0x68, 0x65, 0x20, 0x49, 0x44, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x20, 0x64, 0x72, 0x61, 0x66, 0x74, 0xa2, 0x02, 0x06, 0x75, 0x75, 0x69, 0x64, 0x76, 0x34,
	0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0xe2, 0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x01, 0x48, 0x02, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x44, 0x72, 0x61, 0x66, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x1a, 0x49, 0x0a, 0x08, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x3a, 0x5f, 0x92, 0x41, 0x5c, 0x0a, 0x5a, 0x2a, 0x03, 0x4a, 0x6f,
	0x62, 0x32, 0x53, 0x41, 0x20, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x20, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6a, 0x6f, 0x62, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
	0x68, 0x61, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x64, 0x20, 0x61, 0x20, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x74, 0x6f, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x72, 0x20,
	0x6d, 0x6f, 0x72, 0x65, 0x20, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x2a, 0x84,
	0x02, 0x0a, 0x07, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x55,
	0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x46,
	0x41, 0x4c, 0x53, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d,
	0x45, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x55, 0x54, 0x43,
	0x4f, 0x4d, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x1a, 0xa6, 0x01, 0x92,
	0x41, 0xa2, 0x01, 0x0a, 0x73, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x61, 0x6e, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x54,
	0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x54, 0x52, 0x55, 0x45, 0x20, 0x6f, 0x72,
	0x20, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x2c, 0x20, 0x62, 0x75, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x20, 0x61, 0x73,
	0x20, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x20, 0x64, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x61,
	0x6e, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x13, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x1a, 0x16, 0x50,
	0x73, 0x65, 0x75, 0x64, 0x6f, 0x2d, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x20, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x2a, 0xe3, 0x01, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4a, 0x4f, 0x42, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4a, 0x4f, 0x42,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x17, 0x0a, 0x13, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x40, 0x92, 0x41, 0x3d, 0x0a, 0x2f,
	0x54, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20,
	0x6a, 0x6f, 0x62, 0x20, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a,
	0x0a, 0x4a, 0x6f, 0x62, 0x20, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x38, 0x5a, 0x36, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x61, 0x69, 0x2f, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61, 0x69, 0x6c, 0x2f, 0x6c, 0x69, 0x62,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x73, 0x2f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_clavata_shared_v1_public_proto_rawDescOnce sync.Once
	file_clavata_shared_v1_public_proto_rawDescData = file_clavata_shared_v1_public_proto_rawDesc
)

func file_clavata_shared_v1_public_proto_rawDescGZIP() []byte {
	file_clavata_shared_v1_public_proto_rawDescOnce.Do(func() {
		file_clavata_shared_v1_public_proto_rawDescData = protoimpl.X.CompressGZIP(file_clavata_shared_v1_public_proto_rawDescData)
	})
	return file_clavata_shared_v1_public_proto_rawDescData
}

var file_clavata_shared_v1_public_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_clavata_shared_v1_public_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_clavata_shared_v1_public_proto_goTypes = []any{
	(Outcome)(0),                       // 0: clavata.shared.v1.Outcome
	(JobStatus)(0),                     // 1: clavata.shared.v1.JobStatus
	(*ContentData)(nil),                // 2: clavata.shared.v1.ContentData
	(*SourceRange)(nil),                // 3: clavata.shared.v1.SourceRange
	(*PolicyEvaluationReport)(nil),     // 4: clavata.shared.v1.PolicyEvaluationReport
	(*TimeRange)(nil),                  // 5: clavata.shared.v1.TimeRange
	(*JobResult)(nil),                  // 6: clavata.shared.v1.JobResult
	(*Job)(nil),                        // 7: clavata.shared.v1.Job
	nil,                                // 8: clavata.shared.v1.ContentData.MetadataEntry
	(*SourceRange_SourceLocation)(nil), // 9: clavata.shared.v1.SourceRange.SourceLocation
	(*PolicyEvaluationReport_ReviewResult)(nil),              // 10: clavata.shared.v1.PolicyEvaluationReport.ReviewResult
	(*PolicyEvaluationReport_AssertionEvaluationReport)(nil), // 11: clavata.shared.v1.PolicyEvaluationReport.AssertionEvaluationReport
	(*PolicyEvaluationReport_ExceptionEvaluationReport)(nil), // 12: clavata.shared.v1.PolicyEvaluationReport.ExceptionEvaluationReport
	(*PolicyEvaluationReport_SectionEvaluationReport)(nil),   // 13: clavata.shared.v1.PolicyEvaluationReport.SectionEvaluationReport
	nil,                           // 14: clavata.shared.v1.PolicyEvaluationReport.ContentMetadataEntry
	(*Job_Metadata)(nil),          // 15: clavata.shared.v1.Job.Metadata
	(*timestamppb.Timestamp)(nil), // 16: google.protobuf.Timestamp
}
var file_clavata_shared_v1_public_proto_depIdxs = []int32{
	8,  // 0: clavata.shared.v1.ContentData.metadata:type_name -> clavata.shared.v1.ContentData.MetadataEntry
	9,  // 1: clavata.shared.v1.SourceRange.start:type_name -> clavata.shared.v1.SourceRange.SourceLocation
	9,  // 2: clavata.shared.v1.SourceRange.end:type_name -> clavata.shared.v1.SourceRange.SourceLocation
	0,  // 3: clavata.shared.v1.PolicyEvaluationReport.result:type_name -> clavata.shared.v1.Outcome
	13, // 4: clavata.shared.v1.PolicyEvaluationReport.section_evaluation_reports:type_name -> clavata.shared.v1.PolicyEvaluationReport.SectionEvaluationReport
	12, // 5: clavata.shared.v1.PolicyEvaluationReport.exception_evaluation_report:type_name -> clavata.shared.v1.PolicyEvaluationReport.ExceptionEvaluationReport
	14, // 6: clavata.shared.v1.PolicyEvaluationReport.content_metadata:type_name -> clavata.shared.v1.PolicyEvaluationReport.ContentMetadataEntry
	10, // 7: clavata.shared.v1.PolicyEvaluationReport.review_result:type_name -> clavata.shared.v1.PolicyEvaluationReport.ReviewResult
	16, // 8: clavata.shared.v1.TimeRange.start:type_name -> google.protobuf.Timestamp
	16, // 9: clavata.shared.v1.TimeRange.end:type_name -> google.protobuf.Timestamp
	4,  // 10: clavata.shared.v1.JobResult.report:type_name -> clavata.shared.v1.PolicyEvaluationReport
	16, // 11: clavata.shared.v1.JobResult.created:type_name -> google.protobuf.Timestamp
	1,  // 12: clavata.shared.v1.Job.status:type_name -> clavata.shared.v1.JobStatus
	15, // 13: clavata.shared.v1.Job.metadata:type_name -> clavata.shared.v1.Job.Metadata
	2,  // 14: clavata.shared.v1.Job.content_data:type_name -> clavata.shared.v1.ContentData
	6,  // 15: clavata.shared.v1.Job.results:type_name -> clavata.shared.v1.JobResult
	16, // 16: clavata.shared.v1.Job.created:type_name -> google.protobuf.Timestamp
	16, // 17: clavata.shared.v1.Job.updated:type_name -> google.protobuf.Timestamp
	16, // 18: clavata.shared.v1.Job.completed:type_name -> google.protobuf.Timestamp
	0,  // 19: clavata.shared.v1.PolicyEvaluationReport.ReviewResult.outcome:type_name -> clavata.shared.v1.Outcome
	0,  // 20: clavata.shared.v1.PolicyEvaluationReport.AssertionEvaluationReport.result:type_name -> clavata.shared.v1.Outcome
	3,  // 21: clavata.shared.v1.PolicyEvaluationReport.AssertionEvaluationReport.source_range:type_name -> clavata.shared.v1.SourceRange
	0,  // 22: clavata.shared.v1.PolicyEvaluationReport.ExceptionEvaluationReport.result:type_name -> clavata.shared.v1.Outcome
	11, // 23: clavata.shared.v1.PolicyEvaluationReport.ExceptionEvaluationReport.assertion_evaluation_reports:type_name -> clavata.shared.v1.PolicyEvaluationReport.AssertionEvaluationReport
	3,  // 24: clavata.shared.v1.PolicyEvaluationReport.ExceptionEvaluationReport.source_range:type_name -> clavata.shared.v1.SourceRange
	10, // 25: clavata.shared.v1.PolicyEvaluationReport.ExceptionEvaluationReport.review_result:type_name -> clavata.shared.v1.PolicyEvaluationReport.ReviewResult
	0,  // 26: clavata.shared.v1.PolicyEvaluationReport.SectionEvaluationReport.result:type_name -> clavata.shared.v1.Outcome
	11, // 27: clavata.shared.v1.PolicyEvaluationReport.SectionEvaluationReport.assertion_evaluation_reports:type_name -> clavata.shared.v1.PolicyEvaluationReport.AssertionEvaluationReport
	12, // 28: clavata.shared.v1.PolicyEvaluationReport.SectionEvaluationReport.exception_evaluation_report:type_name -> clavata.shared.v1.PolicyEvaluationReport.ExceptionEvaluationReport
	3,  // 29: clavata.shared.v1.PolicyEvaluationReport.SectionEvaluationReport.source_range:type_name -> clavata.shared.v1.SourceRange
	10, // 30: clavata.shared.v1.PolicyEvaluationReport.SectionEvaluationReport.review_result:type_name -> clavata.shared.v1.PolicyEvaluationReport.ReviewResult
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_clavata_shared_v1_public_proto_init() }
func file_clavata_shared_v1_public_proto_init() {
	if File_clavata_shared_v1_public_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_clavata_shared_v1_public_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ContentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_shared_v1_public_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SourceRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_shared_v1_public_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyEvaluationReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_shared_v1_public_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*TimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_shared_v1_public_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*JobResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_shared_v1_public_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_shared_v1_public_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*SourceRange_SourceLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_shared_v1_public_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyEvaluationReport_ReviewResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_shared_v1_public_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyEvaluationReport_AssertionEvaluationReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_shared_v1_public_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyEvaluationReport_ExceptionEvaluationReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_shared_v1_public_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyEvaluationReport_SectionEvaluationReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_shared_v1_public_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Job_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_clavata_shared_v1_public_proto_msgTypes[0].OneofWrappers = []any{
		(*ContentData_Text)(nil),
		(*ContentData_Image)(nil),
		(*ContentData_ImageUrl)(nil),
		(*ContentData_VideoUrl)(nil),
		(*ContentData_AudioUrl)(nil),
	}
	file_clavata_shared_v1_public_proto_msgTypes[5].OneofWrappers = []any{}
	file_clavata_shared_v1_public_proto_msgTypes[9].OneofWrappers = []any{}
	file_clavata_shared_v1_public_proto_msgTypes[10].OneofWrappers = []any{}
	file_clavata_shared_v1_public_proto_msgTypes[11].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_clavata_shared_v1_public_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_clavata_shared_v1_public_proto_goTypes,
		DependencyIndexes: file_clavata_shared_v1_public_proto_depIdxs,
		EnumInfos:         file_clavata_shared_v1_public_proto_enumTypes,
		MessageInfos:      file_clavata_shared_v1_public_proto_msgTypes,
	}.Build()
	File_clavata_shared_v1_public_proto = out.File
	file_clavata_shared_v1_public_proto_rawDesc = nil
	file_clavata_shared_v1_public_proto_goTypes = nil
	file_clavata_shared_v1_public_proto_depIdxs = nil
}
