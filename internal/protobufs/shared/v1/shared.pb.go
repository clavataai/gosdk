// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: clavata/shared/v1/shared.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Currently ContentMode values includes modality as well as storage means (e.g. image, image_url)
// We want to have a way to refer to the modality or type of at a higher level for api / querying purposes (i.e. just image)
// ContentModality the general way to refer to these modalities, translation into relevant ContentMode values is done within the RPC methods
type ContentModality int32

const (
	ContentModality_UNSPECIFIED ContentModality = 0
	ContentModality_TEXT        ContentModality = 1
	ContentModality_IMAGE       ContentModality = 2
	ContentModality_AUDIO       ContentModality = 3
	ContentModality_VIDEO       ContentModality = 4
)

// Enum value maps for ContentModality.
var (
	ContentModality_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "TEXT",
		2: "IMAGE",
		3: "AUDIO",
		4: "VIDEO",
	}
	ContentModality_value = map[string]int32{
		"UNSPECIFIED": 0,
		"TEXT":        1,
		"IMAGE":       2,
		"AUDIO":       3,
		"VIDEO":       4,
	}
)

func (x ContentModality) Enum() *ContentModality {
	p := new(ContentModality)
	*p = x
	return p
}

func (x ContentModality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentModality) Descriptor() protoreflect.EnumDescriptor {
	return file_clavata_shared_v1_shared_proto_enumTypes[0].Descriptor()
}

func (ContentModality) Type() protoreflect.EnumType {
	return &file_clavata_shared_v1_shared_proto_enumTypes[0]
}

func (x ContentModality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentModality.Descriptor instead.
func (ContentModality) EnumDescriptor() ([]byte, []int) {
	return file_clavata_shared_v1_shared_proto_rawDescGZIP(), []int{0}
}

// QueryType is an enum for the type of query being made
type QueryType int32

const (
	// Unspecified query type
	QueryType_QUERY_TYPE_UNSPECIFIED QueryType = 0
	// Query for an object
	QueryType_QUERY_TYPE_OBJECT QueryType = 1
	// Query for a concept
	QueryType_QUERY_TYPE_CONCEPT QueryType = 2
	// Query for an object or concept in a paritucular context
	QueryType_QUERY_TYPE_CONTEXT QueryType = 3
	// Query for a free-form question
	QueryType_QUERY_TYPE_QUESTION QueryType = 4
	// Query for an exact word or phrase match
	QueryType_QUERY_TYPE_EXACT QueryType = 5
	// Query for a fuzzy word or phrase match
	QueryType_QUERY_TYPE_FUZZY QueryType = 6
	// Query for a content sentiment match
	QueryType_QUERY_TYPE_SENTIMENT QueryType = 7
)

// Enum value maps for QueryType.
var (
	QueryType_name = map[int32]string{
		0: "QUERY_TYPE_UNSPECIFIED",
		1: "QUERY_TYPE_OBJECT",
		2: "QUERY_TYPE_CONCEPT",
		3: "QUERY_TYPE_CONTEXT",
		4: "QUERY_TYPE_QUESTION",
		5: "QUERY_TYPE_EXACT",
		6: "QUERY_TYPE_FUZZY",
		7: "QUERY_TYPE_SENTIMENT",
	}
	QueryType_value = map[string]int32{
		"QUERY_TYPE_UNSPECIFIED": 0,
		"QUERY_TYPE_OBJECT":      1,
		"QUERY_TYPE_CONCEPT":     2,
		"QUERY_TYPE_CONTEXT":     3,
		"QUERY_TYPE_QUESTION":    4,
		"QUERY_TYPE_EXACT":       5,
		"QUERY_TYPE_FUZZY":       6,
		"QUERY_TYPE_SENTIMENT":   7,
	}
)

func (x QueryType) Enum() *QueryType {
	p := new(QueryType)
	*p = x
	return p
}

func (x QueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_clavata_shared_v1_shared_proto_enumTypes[1].Descriptor()
}

func (QueryType) Type() protoreflect.EnumType {
	return &file_clavata_shared_v1_shared_proto_enumTypes[1]
}

func (x QueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryType.Descriptor instead.
func (QueryType) EnumDescriptor() ([]byte, []int) {
	return file_clavata_shared_v1_shared_proto_rawDescGZIP(), []int{1}
}

// Roles for access
type Role int32

const (
	Role_ROLE_UNSPECIFIED Role = 0
	Role_CLAVATA_ADMIN    Role = 1
	Role_ACCOUNT_ADMIN    Role = 2
	Role_POLICY_WRITER    Role = 3
	Role_API_USER         Role = 4
)

// Enum value maps for Role.
var (
	Role_name = map[int32]string{
		0: "ROLE_UNSPECIFIED",
		1: "CLAVATA_ADMIN",
		2: "ACCOUNT_ADMIN",
		3: "POLICY_WRITER",
		4: "API_USER",
	}
	Role_value = map[string]int32{
		"ROLE_UNSPECIFIED": 0,
		"CLAVATA_ADMIN":    1,
		"ACCOUNT_ADMIN":    2,
		"POLICY_WRITER":    3,
		"API_USER":         4,
	}
)

func (x Role) Enum() *Role {
	p := new(Role)
	*p = x
	return p
}

func (x Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role) Descriptor() protoreflect.EnumDescriptor {
	return file_clavata_shared_v1_shared_proto_enumTypes[2].Descriptor()
}

func (Role) Type() protoreflect.EnumType {
	return &file_clavata_shared_v1_shared_proto_enumTypes[2]
}

func (x Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role.Descriptor instead.
func (Role) EnumDescriptor() ([]byte, []int) {
	return file_clavata_shared_v1_shared_proto_rawDescGZIP(), []int{2}
}

// DEPRECATED
//
// Deprecated: Marked as deprecated in clavata/shared/v1/shared.proto.
type Scopes int32

const (
	Scopes_SCOPE_UNSPECIFIED Scopes = 0
	Scopes_CLIENT_ACCESS     Scopes = 1
	Scopes_API_ACCESS        Scopes = 2
)

// Enum value maps for Scopes.
var (
	Scopes_name = map[int32]string{
		0: "SCOPE_UNSPECIFIED",
		1: "CLIENT_ACCESS",
		2: "API_ACCESS",
	}
	Scopes_value = map[string]int32{
		"SCOPE_UNSPECIFIED": 0,
		"CLIENT_ACCESS":     1,
		"API_ACCESS":        2,
	}
)

func (x Scopes) Enum() *Scopes {
	p := new(Scopes)
	*p = x
	return p
}

func (x Scopes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Scopes) Descriptor() protoreflect.EnumDescriptor {
	return file_clavata_shared_v1_shared_proto_enumTypes[3].Descriptor()
}

func (Scopes) Type() protoreflect.EnumType {
	return &file_clavata_shared_v1_shared_proto_enumTypes[3]
}

func (x Scopes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Scopes.Descriptor instead.
func (Scopes) EnumDescriptor() ([]byte, []int) {
	return file_clavata_shared_v1_shared_proto_rawDescGZIP(), []int{3}
}

type SortOrder int32

const (
	SortOrder_SORT_ORDER_UNSPECIFIED SortOrder = 0
	SortOrder_SORT_ORDER_ASC         SortOrder = 1
	SortOrder_SORT_ORDER_DESC        SortOrder = 2
)

// Enum value maps for SortOrder.
var (
	SortOrder_name = map[int32]string{
		0: "SORT_ORDER_UNSPECIFIED",
		1: "SORT_ORDER_ASC",
		2: "SORT_ORDER_DESC",
	}
	SortOrder_value = map[string]int32{
		"SORT_ORDER_UNSPECIFIED": 0,
		"SORT_ORDER_ASC":         1,
		"SORT_ORDER_DESC":        2,
	}
)

func (x SortOrder) Enum() *SortOrder {
	p := new(SortOrder)
	*p = x
	return p
}

func (x SortOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_clavata_shared_v1_shared_proto_enumTypes[4].Descriptor()
}

func (SortOrder) Type() protoreflect.EnumType {
	return &file_clavata_shared_v1_shared_proto_enumTypes[4]
}

func (x SortOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortOrder.Descriptor instead.
func (SortOrder) EnumDescriptor() ([]byte, []int) {
	return file_clavata_shared_v1_shared_proto_rawDescGZIP(), []int{4}
}

type CompilationError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error message
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// The line number of the error
	Line int32 `protobuf:"varint,2,opt,name=line,proto3" json:"line,omitempty"`
	// The column number of the error
	Column int32 `protobuf:"varint,3,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *CompilationError) Reset() {
	*x = CompilationError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_shared_v1_shared_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompilationError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompilationError) ProtoMessage() {}

func (x *CompilationError) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_shared_v1_shared_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompilationError.ProtoReflect.Descriptor instead.
func (*CompilationError) Descriptor() ([]byte, []int) {
	return file_clavata_shared_v1_shared_proto_rawDescGZIP(), []int{0}
}

func (x *CompilationError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CompilationError) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *CompilationError) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

// QueryBody is the message for a query to send to one of our extractors
type QueryBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of query being made
	QueryType QueryType `protobuf:"varint,1,opt,name=query_type,json=queryType,proto3,enum=clavata.shared.v1.QueryType" json:"query_type,omitempty"`
	// The query string. This could be a free-form question, a concept, an object, etc.
	// When the type is "context" this should be the subject of the context query.
	// The target of the query and the context_relation should be in the context_details field.
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// The context details for the query. This is used when the query_type is "context".
	ContextDetails *QueryBody_QueryContext `protobuf:"bytes,3,opt,name=context_details,json=contextDetails,proto3,oneof" json:"context_details,omitempty"`
	// The ID of the query. This is used to match the results back to the query when complete.
	QueryId *string `protobuf:"bytes,4,opt,name=query_id,json=queryId,proto3,oneof" json:"query_id,omitempty"`
}

func (x *QueryBody) Reset() {
	*x = QueryBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_shared_v1_shared_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBody) ProtoMessage() {}

func (x *QueryBody) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_shared_v1_shared_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBody.ProtoReflect.Descriptor instead.
func (*QueryBody) Descriptor() ([]byte, []int) {
	return file_clavata_shared_v1_shared_proto_rawDescGZIP(), []int{1}
}

func (x *QueryBody) GetQueryType() QueryType {
	if x != nil {
		return x.QueryType
	}
	return QueryType_QUERY_TYPE_UNSPECIFIED
}

func (x *QueryBody) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *QueryBody) GetContextDetails() *QueryBody_QueryContext {
	if x != nil {
		return x.ContextDetails
	}
	return nil
}

func (x *QueryBody) GetQueryId() string {
	if x != nil && x.QueryId != nil {
		return *x.QueryId
	}
	return ""
}

// The message for the result of a query to an extractor
type QueryResultBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The confidence of the answer. This is a value between 0 and 1.
	Confidence float64 `protobuf:"fixed64,1,opt,name=confidence,proto3" json:"confidence,omitempty"`
}

func (x *QueryResultBody) Reset() {
	*x = QueryResultBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_shared_v1_shared_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResultBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResultBody) ProtoMessage() {}

func (x *QueryResultBody) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_shared_v1_shared_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResultBody.ProtoReflect.Descriptor instead.
func (*QueryResultBody) Descriptor() ([]byte, []int) {
	return file_clavata_shared_v1_shared_proto_rawDescGZIP(), []int{2}
}

func (x *QueryResultBody) GetConfidence() float64 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The customer ID
	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// The policy ID as set in the database
	PolicyId string `protobuf:"bytes,2,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// The policy key
	PolicyKey string `protobuf:"bytes,3,opt,name=policy_key,json=policyKey,proto3" json:"policy_key,omitempty"`
	// The currently active version of the policy
	ActiveVersionId string `protobuf:"bytes,4,opt,name=active_version_id,json=activeVersionId,proto3" json:"active_version_id,omitempty"`
	// The time the policy was created
	Created *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	// The time the policy was updated
	Updated *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated,proto3" json:"updated,omitempty"`
	// If the policy is soft-deleted, we have a field that allows us to mark it as expunged
	Expunged bool `protobuf:"varint,7,opt,name=expunged,proto3" json:"expunged,omitempty"`
	// If the policy is disabled, we set this to true
	Disabled bool `protobuf:"varint,8,opt,name=disabled,proto3" json:"disabled,omitempty"`
	// The ID of the dataset that the policy belongs to
	DatasetId *string `protobuf:"bytes,9,opt,name=dataset_id,json=datasetId,proto3,oneof" json:"dataset_id,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_shared_v1_shared_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_shared_v1_shared_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_clavata_shared_v1_shared_proto_rawDescGZIP(), []int{3}
}

func (x *Policy) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *Policy) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *Policy) GetPolicyKey() string {
	if x != nil {
		return x.PolicyKey
	}
	return ""
}

func (x *Policy) GetActiveVersionId() string {
	if x != nil {
		return x.ActiveVersionId
	}
	return ""
}

func (x *Policy) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Policy) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *Policy) GetExpunged() bool {
	if x != nil {
		return x.Expunged
	}
	return false
}

func (x *Policy) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Policy) GetDatasetId() string {
	if x != nil && x.DatasetId != nil {
		return *x.DatasetId
	}
	return ""
}

type PolicyVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Policy ID
	PolicyIdentifier *PolicyIdentifier `protobuf:"bytes,1,opt,name=policy_identifier,json=policyIdentifier,proto3" json:"policy_identifier,omitempty"`
	// Version ID
	VersionId string `protobuf:"bytes,2,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// The policy text
	PolicyText string `protobuf:"bytes,3,opt,name=policy_text,json=policyText,proto3" json:"policy_text,omitempty"`
	// The policy_blob is optional as it will not be included in responses to customer facing clients
	PolicyBlob []byte `protobuf:"bytes,4,opt,name=policy_blob,json=policyBlob,proto3,oneof" json:"policy_blob,omitempty"`
	// Is the version expunged?
	Expunged bool `protobuf:"varint,5,opt,name=expunged,proto3" json:"expunged,omitempty"`
	// Any additional metadata about the version of the policy
	Metadata []byte `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Time the version was created
	Created *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *PolicyVersion) Reset() {
	*x = PolicyVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_shared_v1_shared_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyVersion) ProtoMessage() {}

func (x *PolicyVersion) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_shared_v1_shared_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyVersion.ProtoReflect.Descriptor instead.
func (*PolicyVersion) Descriptor() ([]byte, []int) {
	return file_clavata_shared_v1_shared_proto_rawDescGZIP(), []int{4}
}

func (x *PolicyVersion) GetPolicyIdentifier() *PolicyIdentifier {
	if x != nil {
		return x.PolicyIdentifier
	}
	return nil
}

func (x *PolicyVersion) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *PolicyVersion) GetPolicyText() string {
	if x != nil {
		return x.PolicyText
	}
	return ""
}

func (x *PolicyVersion) GetPolicyBlob() []byte {
	if x != nil {
		return x.PolicyBlob
	}
	return nil
}

func (x *PolicyVersion) GetExpunged() bool {
	if x != nil {
		return x.Expunged
	}
	return false
}

func (x *PolicyVersion) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PolicyVersion) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

// PolicyIdentifier is a message for the many RPCs that USED TO require a policy ID OR key.
// While we used to use this interchangeably, aside from when a policy is being created, we now
// only use the policy_id field to fetch policies.
type PolicyIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The policy ID
	PolicyId string `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	// A policy key
	//
	// Deprecated: Marked as deprecated in clavata/shared/v1/shared.proto.
	PolicyKey string `protobuf:"bytes,2,opt,name=policy_key,json=policyKey,proto3" json:"policy_key,omitempty"`
}

func (x *PolicyIdentifier) Reset() {
	*x = PolicyIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_shared_v1_shared_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyIdentifier) ProtoMessage() {}

func (x *PolicyIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_shared_v1_shared_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyIdentifier.ProtoReflect.Descriptor instead.
func (*PolicyIdentifier) Descriptor() ([]byte, []int) {
	return file_clavata_shared_v1_shared_proto_rawDescGZIP(), []int{5}
}

func (x *PolicyIdentifier) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

// Deprecated: Marked as deprecated in clavata/shared/v1/shared.proto.
func (x *PolicyIdentifier) GetPolicyKey() string {
	if x != nil {
		return x.PolicyKey
	}
	return ""
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The token
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// The expiration time of the token
	Expiration *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// Is the token valid
	Valid bool `protobuf:"varint,3,opt,name=valid,proto3" json:"valid,omitempty"`
	// The customer ID for this token
	CustomerUuid string `protobuf:"bytes,4,opt,name=customer_uuid,json=customerUuid,proto3" json:"customer_uuid,omitempty"`
	// Scopes - DEPRECATED. Use roles instead.
	//
	// Deprecated: Marked as deprecated in clavata/shared/v1/shared.proto.
	Scopes []Scopes `protobuf:"varint,5,rep,packed,name=scopes,proto3,enum=clavata.shared.v1.Scopes" json:"scopes,omitempty"`
	// The user email for this token
	UserEmail string `protobuf:"bytes,6,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	// Roles for endpoint access
	Role Role `protobuf:"varint,7,opt,name=role,proto3,enum=clavata.shared.v1.Role" json:"role,omitempty"`
	// User's First Name
	FirstName string `protobuf:"bytes,8,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// User's Last Name
	LastName string `protobuf:"bytes,9,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// User's ID in the database
	UserId string `protobuf:"bytes,10,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_shared_v1_shared_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_shared_v1_shared_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_clavata_shared_v1_shared_proto_rawDescGZIP(), []int{6}
}

func (x *UserInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *UserInfo) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *UserInfo) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *UserInfo) GetCustomerUuid() string {
	if x != nil {
		return x.CustomerUuid
	}
	return ""
}

// Deprecated: Marked as deprecated in clavata/shared/v1/shared.proto.
func (x *UserInfo) GetScopes() []Scopes {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *UserInfo) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UserInfo) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_ROLE_UNSPECIFIED
}

func (x *UserInfo) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UserInfo) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UserInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// The context of the query. This is used when the query_type is "context".
type QueryBody_QueryContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The context relation describes the relationship between the query and the target label
	ContextRelation string `protobuf:"bytes,1,opt,name=context_relation,json=contextRelation,proto3" json:"context_relation,omitempty"`
	// The target label is the label of the object or concept that the query is about
	TargetLabel string `protobuf:"bytes,2,opt,name=target_label,json=targetLabel,proto3" json:"target_label,omitempty"`
}

func (x *QueryBody_QueryContext) Reset() {
	*x = QueryBody_QueryContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_clavata_shared_v1_shared_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryBody_QueryContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBody_QueryContext) ProtoMessage() {}

func (x *QueryBody_QueryContext) ProtoReflect() protoreflect.Message {
	mi := &file_clavata_shared_v1_shared_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBody_QueryContext.ProtoReflect.Descriptor instead.
func (*QueryBody_QueryContext) Descriptor() ([]byte, []int) {
	return file_clavata_shared_v1_shared_proto_rawDescGZIP(), []int{1, 0}
}

func (x *QueryBody_QueryContext) GetContextRelation() string {
	if x != nil {
		return x.ContextRelation
	}
	return ""
}

func (x *QueryBody_QueryContext) GetTargetLabel() string {
	if x != nil {
		return x.TargetLabel
	}
	return ""
}

var File_clavata_shared_v1_shared_proto protoreflect.FileDescriptor

var file_clavata_shared_v1_shared_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xd6,
	0x02, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3b, 0x0a, 0x0a,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x57, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x5c, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xe8, 0x02, 0x0a, 0x06, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78,
	0x70, 0x75, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78,
	0x70, 0x75, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xc5, 0x02, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x11, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x6c, 0x6f, 0x62, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x75, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x65, 0x78, 0x70, 0x75, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x22, 0x52, 0x0a,
	0x10, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4b, 0x65,
	0x79, 0x22, 0xef, 0x02, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6c,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x2a, 0x4d, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x6f,
	0x64, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x10, 0x04, 0x2a, 0xcd, 0x01, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x50, 0x54, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58,
	0x54, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x41, 0x43, 0x54,
	0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x55, 0x5a, 0x5a, 0x59, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x51, 0x55, 0x45, 0x52,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x07, 0x2a, 0x63, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f,
	0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x41, 0x56, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x49,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x04, 0x2a, 0x46, 0x0a, 0x06, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41,
	0x50, 0x49, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x1a, 0x02, 0x18, 0x01, 0x2a,
	0x50, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x52, 0x54,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x53, 0x43, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10,
	0x02, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6c, 0x61, 0x76, 0x61, 0x74, 0x61, 0x61, 0x69, 0x2f, 0x6d, 0x6f, 0x6e, 0x6f, 0x72, 0x61,
	0x69, 0x6c, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x73, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_clavata_shared_v1_shared_proto_rawDescOnce sync.Once
	file_clavata_shared_v1_shared_proto_rawDescData = file_clavata_shared_v1_shared_proto_rawDesc
)

func file_clavata_shared_v1_shared_proto_rawDescGZIP() []byte {
	file_clavata_shared_v1_shared_proto_rawDescOnce.Do(func() {
		file_clavata_shared_v1_shared_proto_rawDescData = protoimpl.X.CompressGZIP(file_clavata_shared_v1_shared_proto_rawDescData)
	})
	return file_clavata_shared_v1_shared_proto_rawDescData
}

var file_clavata_shared_v1_shared_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_clavata_shared_v1_shared_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_clavata_shared_v1_shared_proto_goTypes = []any{
	(ContentModality)(0),           // 0: clavata.shared.v1.ContentModality
	(QueryType)(0),                 // 1: clavata.shared.v1.QueryType
	(Role)(0),                      // 2: clavata.shared.v1.Role
	(Scopes)(0),                    // 3: clavata.shared.v1.Scopes
	(SortOrder)(0),                 // 4: clavata.shared.v1.SortOrder
	(*CompilationError)(nil),       // 5: clavata.shared.v1.CompilationError
	(*QueryBody)(nil),              // 6: clavata.shared.v1.QueryBody
	(*QueryResultBody)(nil),        // 7: clavata.shared.v1.QueryResultBody
	(*Policy)(nil),                 // 8: clavata.shared.v1.Policy
	(*PolicyVersion)(nil),          // 9: clavata.shared.v1.PolicyVersion
	(*PolicyIdentifier)(nil),       // 10: clavata.shared.v1.PolicyIdentifier
	(*UserInfo)(nil),               // 11: clavata.shared.v1.UserInfo
	(*QueryBody_QueryContext)(nil), // 12: clavata.shared.v1.QueryBody.QueryContext
	(*timestamppb.Timestamp)(nil),  // 13: google.protobuf.Timestamp
}
var file_clavata_shared_v1_shared_proto_depIdxs = []int32{
	1,  // 0: clavata.shared.v1.QueryBody.query_type:type_name -> clavata.shared.v1.QueryType
	12, // 1: clavata.shared.v1.QueryBody.context_details:type_name -> clavata.shared.v1.QueryBody.QueryContext
	13, // 2: clavata.shared.v1.Policy.created:type_name -> google.protobuf.Timestamp
	13, // 3: clavata.shared.v1.Policy.updated:type_name -> google.protobuf.Timestamp
	10, // 4: clavata.shared.v1.PolicyVersion.policy_identifier:type_name -> clavata.shared.v1.PolicyIdentifier
	13, // 5: clavata.shared.v1.PolicyVersion.created:type_name -> google.protobuf.Timestamp
	13, // 6: clavata.shared.v1.UserInfo.expiration:type_name -> google.protobuf.Timestamp
	3,  // 7: clavata.shared.v1.UserInfo.scopes:type_name -> clavata.shared.v1.Scopes
	2,  // 8: clavata.shared.v1.UserInfo.role:type_name -> clavata.shared.v1.Role
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_clavata_shared_v1_shared_proto_init() }
func file_clavata_shared_v1_shared_proto_init() {
	if File_clavata_shared_v1_shared_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_clavata_shared_v1_shared_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CompilationError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_shared_v1_shared_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*QueryBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_shared_v1_shared_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*QueryResultBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_shared_v1_shared_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_shared_v1_shared_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_shared_v1_shared_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*PolicyIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_shared_v1_shared_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_clavata_shared_v1_shared_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*QueryBody_QueryContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_clavata_shared_v1_shared_proto_msgTypes[1].OneofWrappers = []any{}
	file_clavata_shared_v1_shared_proto_msgTypes[3].OneofWrappers = []any{}
	file_clavata_shared_v1_shared_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_clavata_shared_v1_shared_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_clavata_shared_v1_shared_proto_goTypes,
		DependencyIndexes: file_clavata_shared_v1_shared_proto_depIdxs,
		EnumInfos:         file_clavata_shared_v1_shared_proto_enumTypes,
		MessageInfos:      file_clavata_shared_v1_shared_proto_msgTypes,
	}.Build()
	File_clavata_shared_v1_shared_proto = out.File
	file_clavata_shared_v1_shared_proto_rawDesc = nil
	file_clavata_shared_v1_shared_proto_goTypes = nil
	file_clavata_shared_v1_shared_proto_depIdxs = nil
}
