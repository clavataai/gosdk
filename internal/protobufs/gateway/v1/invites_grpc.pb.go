// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.3
// source: clavata/gateway/v1/invites.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	InvitesService_Invite_FullMethodName       = "/clavata.gateway.v1.InvitesService/Invite"
	InvitesService_RenewInvite_FullMethodName  = "/clavata.gateway.v1.InvitesService/RenewInvite"
	InvitesService_ListInvites_FullMethodName  = "/clavata.gateway.v1.InvitesService/ListInvites"
	InvitesService_DeleteInvite_FullMethodName = "/clavata.gateway.v1.InvitesService/DeleteInvite"
)

// InvitesServiceClient is the client API for InvitesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvitesServiceClient interface {
	// Invite a user to a Clavata account, this is a prerequisite for the user to be able to
	// register and use the Clavata API. The user will receive an email with a link to register.
	Invite(ctx context.Context, in *InviteRequest, opts ...grpc.CallOption) (*InviteResponse, error)
	// RenewInvite will update an existing invite with a new expiration time. If the invite
	// is already accepted, the request will fail.
	RenewInvite(ctx context.Context, in *RenewInviteRequest, opts ...grpc.CallOption) (*RenewInviteResponse, error)
	// List the current Invites to the account
	ListInvites(ctx context.Context, in *ListInvitesRequest, opts ...grpc.CallOption) (*ListInvitesResponse, error)
	// Remove an invite from the account
	DeleteInvite(ctx context.Context, in *DeleteInviteRequest, opts ...grpc.CallOption) (*DeleteInviteResponse, error)
}

type invitesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvitesServiceClient(cc grpc.ClientConnInterface) InvitesServiceClient {
	return &invitesServiceClient{cc}
}

func (c *invitesServiceClient) Invite(ctx context.Context, in *InviteRequest, opts ...grpc.CallOption) (*InviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InviteResponse)
	err := c.cc.Invoke(ctx, InvitesService_Invite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitesServiceClient) RenewInvite(ctx context.Context, in *RenewInviteRequest, opts ...grpc.CallOption) (*RenewInviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenewInviteResponse)
	err := c.cc.Invoke(ctx, InvitesService_RenewInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitesServiceClient) ListInvites(ctx context.Context, in *ListInvitesRequest, opts ...grpc.CallOption) (*ListInvitesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInvitesResponse)
	err := c.cc.Invoke(ctx, InvitesService_ListInvites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitesServiceClient) DeleteInvite(ctx context.Context, in *DeleteInviteRequest, opts ...grpc.CallOption) (*DeleteInviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteInviteResponse)
	err := c.cc.Invoke(ctx, InvitesService_DeleteInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvitesServiceServer is the server API for InvitesService service.
// All implementations must embed UnimplementedInvitesServiceServer
// for forward compatibility
type InvitesServiceServer interface {
	// Invite a user to a Clavata account, this is a prerequisite for the user to be able to
	// register and use the Clavata API. The user will receive an email with a link to register.
	Invite(context.Context, *InviteRequest) (*InviteResponse, error)
	// RenewInvite will update an existing invite with a new expiration time. If the invite
	// is already accepted, the request will fail.
	RenewInvite(context.Context, *RenewInviteRequest) (*RenewInviteResponse, error)
	// List the current Invites to the account
	ListInvites(context.Context, *ListInvitesRequest) (*ListInvitesResponse, error)
	// Remove an invite from the account
	DeleteInvite(context.Context, *DeleteInviteRequest) (*DeleteInviteResponse, error)
	mustEmbedUnimplementedInvitesServiceServer()
}

// UnimplementedInvitesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInvitesServiceServer struct {
}

func (UnimplementedInvitesServiceServer) Invite(context.Context, *InviteRequest) (*InviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invite not implemented")
}
func (UnimplementedInvitesServiceServer) RenewInvite(context.Context, *RenewInviteRequest) (*RenewInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewInvite not implemented")
}
func (UnimplementedInvitesServiceServer) ListInvites(context.Context, *ListInvitesRequest) (*ListInvitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvites not implemented")
}
func (UnimplementedInvitesServiceServer) DeleteInvite(context.Context, *DeleteInviteRequest) (*DeleteInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInvite not implemented")
}
func (UnimplementedInvitesServiceServer) mustEmbedUnimplementedInvitesServiceServer() {}

// UnsafeInvitesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvitesServiceServer will
// result in compilation errors.
type UnsafeInvitesServiceServer interface {
	mustEmbedUnimplementedInvitesServiceServer()
}

func RegisterInvitesServiceServer(s grpc.ServiceRegistrar, srv InvitesServiceServer) {
	s.RegisterService(&InvitesService_ServiceDesc, srv)
}

func _InvitesService_Invite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitesServiceServer).Invite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitesService_Invite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitesServiceServer).Invite(ctx, req.(*InviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitesService_RenewInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitesServiceServer).RenewInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitesService_RenewInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitesServiceServer).RenewInvite(ctx, req.(*RenewInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitesService_ListInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitesServiceServer).ListInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitesService_ListInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitesServiceServer).ListInvites(ctx, req.(*ListInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitesService_DeleteInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitesServiceServer).DeleteInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitesService_DeleteInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitesServiceServer).DeleteInvite(ctx, req.(*DeleteInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InvitesService_ServiceDesc is the grpc.ServiceDesc for InvitesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvitesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clavata.gateway.v1.InvitesService",
	HandlerType: (*InvitesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invite",
			Handler:    _InvitesService_Invite_Handler,
		},
		{
			MethodName: "RenewInvite",
			Handler:    _InvitesService_RenewInvite_Handler,
		},
		{
			MethodName: "ListInvites",
			Handler:    _InvitesService_ListInvites_Handler,
		},
		{
			MethodName: "DeleteInvite",
			Handler:    _InvitesService_DeleteInvite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clavata/gateway/v1/invites.proto",
}
