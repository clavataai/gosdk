// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.3
// source: clavata/gateway/v1/deployments.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DeploymentsService_GetDeployment_FullMethodName           = "/clavata.gateway.v1.DeploymentsService/GetDeployment"
	DeploymentsService_ListDeployments_FullMethodName         = "/clavata.gateway.v1.DeploymentsService/ListDeployments"
	DeploymentsService_CreateDeployment_FullMethodName        = "/clavata.gateway.v1.DeploymentsService/CreateDeployment"
	DeploymentsService_UpdateDeployment_FullMethodName        = "/clavata.gateway.v1.DeploymentsService/UpdateDeployment"
	DeploymentsService_UpdatePolicyDeployments_FullMethodName = "/clavata.gateway.v1.DeploymentsService/UpdatePolicyDeployments"
	DeploymentsService_ArchiveDeployment_FullMethodName       = "/clavata.gateway.v1.DeploymentsService/ArchiveDeployment"
)

// DeploymentsServiceClient is the client API for DeploymentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeploymentsServiceClient interface {
	GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*GetDeploymentResponse, error)
	ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*ListDeploymentsResponse, error)
	CreateDeployment(ctx context.Context, in *CreateDeploymentRequest, opts ...grpc.CallOption) (*CreateDeploymentResponse, error)
	UpdateDeployment(ctx context.Context, in *UpdateDeploymentRequest, opts ...grpc.CallOption) (*UpdateDeploymentResponse, error)
	UpdatePolicyDeployments(ctx context.Context, in *UpdatePolicyDeploymentsRequest, opts ...grpc.CallOption) (*UpdatePolicyDeploymentsResponse, error)
	ArchiveDeployment(ctx context.Context, in *ArchiveDeploymentRequest, opts ...grpc.CallOption) (*ArchiveDeploymentResponse, error)
}

type deploymentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeploymentsServiceClient(cc grpc.ClientConnInterface) DeploymentsServiceClient {
	return &deploymentsServiceClient{cc}
}

func (c *deploymentsServiceClient) GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*GetDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeploymentResponse)
	err := c.cc.Invoke(ctx, DeploymentsService_GetDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentsServiceClient) ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*ListDeploymentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDeploymentsResponse)
	err := c.cc.Invoke(ctx, DeploymentsService_ListDeployments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentsServiceClient) CreateDeployment(ctx context.Context, in *CreateDeploymentRequest, opts ...grpc.CallOption) (*CreateDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDeploymentResponse)
	err := c.cc.Invoke(ctx, DeploymentsService_CreateDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentsServiceClient) UpdateDeployment(ctx context.Context, in *UpdateDeploymentRequest, opts ...grpc.CallOption) (*UpdateDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDeploymentResponse)
	err := c.cc.Invoke(ctx, DeploymentsService_UpdateDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentsServiceClient) UpdatePolicyDeployments(ctx context.Context, in *UpdatePolicyDeploymentsRequest, opts ...grpc.CallOption) (*UpdatePolicyDeploymentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePolicyDeploymentsResponse)
	err := c.cc.Invoke(ctx, DeploymentsService_UpdatePolicyDeployments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentsServiceClient) ArchiveDeployment(ctx context.Context, in *ArchiveDeploymentRequest, opts ...grpc.CallOption) (*ArchiveDeploymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArchiveDeploymentResponse)
	err := c.cc.Invoke(ctx, DeploymentsService_ArchiveDeployment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeploymentsServiceServer is the server API for DeploymentsService service.
// All implementations must embed UnimplementedDeploymentsServiceServer
// for forward compatibility
type DeploymentsServiceServer interface {
	GetDeployment(context.Context, *GetDeploymentRequest) (*GetDeploymentResponse, error)
	ListDeployments(context.Context, *ListDeploymentsRequest) (*ListDeploymentsResponse, error)
	CreateDeployment(context.Context, *CreateDeploymentRequest) (*CreateDeploymentResponse, error)
	UpdateDeployment(context.Context, *UpdateDeploymentRequest) (*UpdateDeploymentResponse, error)
	UpdatePolicyDeployments(context.Context, *UpdatePolicyDeploymentsRequest) (*UpdatePolicyDeploymentsResponse, error)
	ArchiveDeployment(context.Context, *ArchiveDeploymentRequest) (*ArchiveDeploymentResponse, error)
	mustEmbedUnimplementedDeploymentsServiceServer()
}

// UnimplementedDeploymentsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeploymentsServiceServer struct {
}

func (UnimplementedDeploymentsServiceServer) GetDeployment(context.Context, *GetDeploymentRequest) (*GetDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployment not implemented")
}
func (UnimplementedDeploymentsServiceServer) ListDeployments(context.Context, *ListDeploymentsRequest) (*ListDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeployments not implemented")
}
func (UnimplementedDeploymentsServiceServer) CreateDeployment(context.Context, *CreateDeploymentRequest) (*CreateDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeployment not implemented")
}
func (UnimplementedDeploymentsServiceServer) UpdateDeployment(context.Context, *UpdateDeploymentRequest) (*UpdateDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeployment not implemented")
}
func (UnimplementedDeploymentsServiceServer) UpdatePolicyDeployments(context.Context, *UpdatePolicyDeploymentsRequest) (*UpdatePolicyDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicyDeployments not implemented")
}
func (UnimplementedDeploymentsServiceServer) ArchiveDeployment(context.Context, *ArchiveDeploymentRequest) (*ArchiveDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveDeployment not implemented")
}
func (UnimplementedDeploymentsServiceServer) mustEmbedUnimplementedDeploymentsServiceServer() {}

// UnsafeDeploymentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeploymentsServiceServer will
// result in compilation errors.
type UnsafeDeploymentsServiceServer interface {
	mustEmbedUnimplementedDeploymentsServiceServer()
}

func RegisterDeploymentsServiceServer(s grpc.ServiceRegistrar, srv DeploymentsServiceServer) {
	s.RegisterService(&DeploymentsService_ServiceDesc, srv)
}

func _DeploymentsService_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServiceServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentsService_GetDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServiceServer).GetDeployment(ctx, req.(*GetDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentsService_ListDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServiceServer).ListDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentsService_ListDeployments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServiceServer).ListDeployments(ctx, req.(*ListDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentsService_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServiceServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentsService_CreateDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServiceServer).CreateDeployment(ctx, req.(*CreateDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentsService_UpdateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServiceServer).UpdateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentsService_UpdateDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServiceServer).UpdateDeployment(ctx, req.(*UpdateDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentsService_UpdatePolicyDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePolicyDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServiceServer).UpdatePolicyDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentsService_UpdatePolicyDeployments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServiceServer).UpdatePolicyDeployments(ctx, req.(*UpdatePolicyDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeploymentsService_ArchiveDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServiceServer).ArchiveDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeploymentsService_ArchiveDeployment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServiceServer).ArchiveDeployment(ctx, req.(*ArchiveDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeploymentsService_ServiceDesc is the grpc.ServiceDesc for DeploymentsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeploymentsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clavata.gateway.v1.DeploymentsService",
	HandlerType: (*DeploymentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeployment",
			Handler:    _DeploymentsService_GetDeployment_Handler,
		},
		{
			MethodName: "ListDeployments",
			Handler:    _DeploymentsService_ListDeployments_Handler,
		},
		{
			MethodName: "CreateDeployment",
			Handler:    _DeploymentsService_CreateDeployment_Handler,
		},
		{
			MethodName: "UpdateDeployment",
			Handler:    _DeploymentsService_UpdateDeployment_Handler,
		},
		{
			MethodName: "UpdatePolicyDeployments",
			Handler:    _DeploymentsService_UpdatePolicyDeployments_Handler,
		},
		{
			MethodName: "ArchiveDeployment",
			Handler:    _DeploymentsService_ArchiveDeployment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clavata/gateway/v1/deployments.proto",
}
